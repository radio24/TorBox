#!/bin/bash

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2021 Patrick Truffer
# Contact: anonym@torbox.ch
# Website: https://www.torbox.ch
# Github:  https://github.com/radio24/TorBox
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file updates the base system of the TorBox and upgrades it to the latest stable tor release.
#
# SYNTAX
# screen bash update
#
#
##### SET VARIABLES ######
#
# SIZE OF THE MENU
#
# How many items do you have in the main menu?
NO_ITEMS=11
#
# How many lines are only for decoration and spaces?
NO_SPACER=0
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_15=15
MENU_HEIGHT_20=20
MENU_HEIGHT_25=25
MENU_HEIGHT=$((8+NO_ITEMS+NO_SPACER))
MENU_LIST_HEIGHT=$((NO_ITEMS+$NO_SPACER))

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Identifying the hardware (see also https://gist.github.com/jperkin/c37a574379ef71e339361954be96be12)
if grep -q --text 'Raspberry Pi 4' /proc/device-tree/model ; then CHECK_HD3="Raspberry Pi 4" ; fi
if grep -q "Raspberry Pi 4" /proc/cpuinfo ; then CHECK_HD3="Raspberry Pi 4" ; fi

# Identify the Operation System
CHECK_OS="OTHER"
if hostnamectl | grep -q "Raspbian" ; then CHECK_OS="Raspbian" ; fi
if hostnamectl | grep -q "Debian" ; then CHECK_OS="Debian" ; fi
if hostnamectl | grep -q "Ubuntu" ; then CHECK_OS="Ubuntu" ; fi

# URLS
SOURCES_TOR_UPDATE_PLAIN="https://deb.torproject.org"
SOURCES_TOR_UPDATE_PLAIN_SED="https:\/\/deb.torproject.org"
SOURCES_TOR_UPDATE_ONION_APT="tor://apow7mjfryruh65chtdydfmqfpj5btws7nbocgtaovhvezgccyjazpqd.onion"
SOURCES_TOR_UPDATE_ONION_SED="tor:\/\/apow7mjfryruh65chtdydfmqfpj5btws7nbocgtaovhvezgccyjazpqd.onion"
SOURCES_TOR_UPDATE_ONION_CURL="--socks5 192.168.42.1:9050 --socks5-hostname 192.168.42.1:9050 http://apow7mjfryruh65chtdydfmqfpj5btws7nbocgtaovhvezgccyjazpqd.onion"
TORBOXMENUURL="https://github.com/radio24/TorBox/archive/refs/heads/master.zip"
TORURL="https://github.com/torproject/tor/releases"
TORURL_DL_PARTIAL="https://github.com/torproject/tor/archive/refs/tags/tor"


#Other variables
LOOP_NUMBER=0
RECOMPILE=0
TORBOX_UPDATE=0
TORRC="/etc/tor/torrc"
RUNFILE="run/torbox.run"
NEW_IDENT="new_ident"
BOOTMSG=0
i=0
n=0

# Connectivity check
CHECK_URL=$(grep "^PING_SERVER=" ${RUNFILE} | cut -c13-) 2> /dev/null

##############################
######## FUNCTIONS ###########

# include lib
.  lib/torbox.lib

# This function updates the firmware on a RPI4
update_firmware()
{
  online_check update
  TORCONNECT=0
  set_sources_list
  clear
  sudo apt-get install rpi-eeprom
  sleep 2
  clear
  echo -e "${RED}[!] Updating firmware if requiered...${NOCOLOR}"
  echo " "
  sudo rpi-eeprom-update
  echo " "
  read -n 1 -s -r -p "Press any key to continue"
  echo " "
  sudo rpi-eeprom-update -a
  echo " "
  echo -e "${WHITE}[+] DONE! ${NOCOLOR}"
  sleep 5
}

# This function updates TOR
update_tor()
{
  clear
  if [ -d ~/debian-packages ] ; then sudo rm -r ~/debian-packages ; fi
  mkdir ~/debian-packages; cd ~/debian-packages
  sudo apt-get -y update
  sudo apt source tor
  KERNEL_VERS=$(uname -s -r)
  TOR_VERS=$(tor --version|head -n 1|rev|cut -c2-|rev|cut -d " " -f3)
  SOURCE_VERS_NUMBER=$(ls -l|grep "^d"|grep -o "tor.*"|cut -d " " -f11-|sed s/tor-//g|sed s/.orig//g)
  clear
  if [ "$SOURCE_VERS_NUMBER" == "$TOR_VERS" ] ; then
    INPUT="\nThis are the versions of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS (newest stable version!)\n\nThere is no new stable version of Tor around!\nWould you like to recompile Tor anyway?"
    if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
      RECOMPILE=1
    else
      RECOMPILE=0
    fi
  elif [ -z "$SOURCE_VERS_NUMBER" ] ; then
    INPUT="\nThis are the versions of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS\n\nHowever, something went wrong! I couldn't download the Tor package. You may try it later or manually !!"
    whiptail --title "TorBox - INFO" --msgbox "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
    RECOMPILE=0
  else
    if [ $LOOP_NUMBER = 1 ]; then
      INPUT="\nThis are the versions of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS\n\nWould you like to change/update to Tor version $SOURCE_VERS_NUMBER?"
      if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
        RECOMPILE=1
      else
        RECOMPILE=0
      fi
    else
      RECOMPILE=1
    fi
  fi
  if [ $RECOMPILE = 1 ]; then
    clear
    echo -e "${RED}[+] Starting configuring, compiling and installing... ${NOCOLOR}"
    sudo apt-get -y install build-essential fakeroot devscripts
    # sudo apt-get -y upgrade tor deb.torproject.org-keyring
    sudo apt-get -y build-dep tor deb.torproject.org-keyring
    cd tor-*
    sudo debuild -rfakeroot -uc -us
    cd ..
    sudo dpkg -i tor_*.deb
    #read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
    #Return code for BOOTMSG / 1=finishing / 0=no finishing needed
    return 1
  fi
}

# With this function change/update of tor from a list of versions is possible
# Used predefined variables: TORURL, TORURL_DL_PARTIAL
select_and_install_tor()
{
  clear
  # Release Page of the Unofficial Tor repositories on GitHub
  echo -e "${RED}[+] Fetching possible tor versions... ${NOCOLOR}"
  if [ $TORCONNECT -eq 0 ]; then
    readarray -t torversion_datesorted < <(curl --silent $TORURL | grep "/torproject/tor/releases/tag/" | sed -e "s/<a href=\"\/torproject\/tor\/releases\/tag\/tor-//g" | sed -e "s/\">//g")
  else
    readarray -t torversion_datesorted < <(curl --socks5 192.168.42.1:9050 --socks5-hostname 192.168.42.1:9050 --silent $TORURL | grep "/torproject/tor/releases/tag/" | sed -e "s/<a href=\"\/torproject\/tor\/releases\/tag\/tor-//g" | sed -e "s/\">//g")
  fi
  #How many tor version did we fetch?
  if [ ${#torversion_datesorted[0]} = 0 ]; then number_torversion=0
  else
    number_torversion=${#torversion_datesorted[*]}

    #The fetched tor versions are sorted by dates, but we need it sorted by version
    IFS=$'\n' torversion_versionsorted=($(sort -r <<< "${torversion_datesorted[*]}")); unset IFS

    #We will build a new array with only the relevant tor versions
    while [ $i -lt $number_torversion ]
    do
      if [ $n = 0 ] ; then
        torversion_versionsorted_new[0]=${torversion_versionsorted[0]}
        covered_version=$(cut -d '.' -f1-3 <<< ${torversion_versionsorted[0]})
        i=$(( $i + 1 ))
        n=$(( $n + 1 ))
      else
        actual_version=$(cut -d '.' -f1-3 <<< ${torversion_versionsorted[$i]})
        if [ "$actual_version" == "$covered_version" ] ; then i=$(( $i + 1 ))
        else
          torversion_versionsorted_new[$n]=${torversion_versionsorted[$i]}
          covered_version=$actual_version
          i=$(( $i + 1 ))
          n=$(( $n + 1 ))
        fi
      fi
    done
    number_torversion=$n

    #Display and chose a tor version
    clear
    echo -e "${WHITE}Choose a tor version (alpha versions are not recommended!):${NOCOLOR}"
    echo ""
    for (( i=0; i<$number_torversion; i++ ))
    do
      menuitem=$(( $i + 1 ))
      echo -e "${RED}$menuitem${NOCOLOR} - ${torversion_versionsorted_new[$i]}"
    done
    echo ""
    read -r -p $'\e[1;37mWhich tor version (number) would you like to use (0 = EXIT)? -> \e[0m'
    echo
    if [[ $REPLY =~ ^[1234567890]$ ]] ; then
      if [ $REPLY = 0 ] ; then
        number_torversion=0
        #Return code for BOOTMSG / 1=finishing / 0=no finishing needed
        return 0
      else
        CHOICE_TOR=$(( $REPLY - 1 ))
        clear
        echo -e "${RED}[+] Install necessary packages... ${NOCOLOR}"
        sudo apt-get -y update
        sudo apt-get -y install automake libevent-dev libssl-dev asciidoc-base
        echo ""
        echo -e "${RED}[+] Download the selected tor version...... ${NOCOLOR}"
        version_string="$(<<< ${torversion_versionsorted_new[$CHOICE_TOR]} sed -e 's/ //g')"
        download_tor_url="$TORURL_DL_PARTIAL-$version_string.tar.gz"
        filename="tor-$version_string.tar.gz"
        if [ -d ~/debian-packages ] ; then sudo rm -r ~/debian-packages ; fi
        mkdir ~/debian-packages; cd ~/debian-packages
        if [ $TORCONNECT -eq 0 ]; then
          wget $download_tor_url
          DLCHECK=$?
        else
          # IMPORTANT: THIS WILL NOT WORK WITH A CAPTCHA!
          torsocks wget $download_tor_url
          DLCHECK=$?
        fi
        clear
        if [ $DLCHECK -eq 0 ] ; then
          echo -e "${RED}[+] Sucessfully downloaded the selected tor version... ${NOCOLOR}"
          tar xzf $filename
          cd `ls -d */`
          echo -e "${RED}[+] Starting configuring, compiling and installing... ${NOCOLOR}"
          ./autogen.sh
          ./configure
          make
          sudo make install
          #read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
          #Return code for BOOTMSG / 1=finishing / 0=no finishing needed
          return 1
        else number_torversion=0 ; fi
      fi
    else number_torversion=0 ; fi
  fi
  if [ $number_torversion = 0 ]; then
    echo ""
    echo -e "${WHITE}[!] Something didn't go as expected or you chose to exit!${NOCOLOR}"
    echo -e "${WHITE}[!] Try it again or chose the DEFAULT installation procedure!${NOCOLOR}"
    echo ""
    read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
    clear
    #Return code for BOOTMSG / 1=finishing / 0=no finishing needed
    return 0
  fi
}

#This function updates / resets TorBox's configuration files
update_torcfg()
{
  clear
  echo -e "${RED}[+] Copying TorBox's configuration files...${NOCOLOR}"
  echo ""
  if ! grep "torproject" /etc/apt/sources.list ; then
    sudo sed -i "/# Added by TorBox/d" /etc/apt/sources.list
    sudo sed -i "/$SOURCES_TOR_UPDATE_ONION_SED/d" /etc/apt/sources.list
    sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
    sudo printf "\n# Added by TorBox update script\ndeb $SOURCES_TOR_UPDATE_PLAIN buster main\ndeb-src $SOURCES_TOR_UPDATE_PLAIN buster main\n" | sudo tee -a /etc/apt/sources.list
    echo -e "${RED}[+]${NOCOLOR} Changed /etc/apt/sources.list -- backup done"
  fi
  (sudo cp /etc/default/hostapd /etc/default/hostapd.bak) 2> /dev/null
  sudo cp etc/default/hostapd /etc/default/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/default/hostapd -- backup done"
  (sudo cp /etc/default/isc-dhcp-server /etc/default/isc-dhcp-server.bak) 2> /dev/null
  sudo cp etc/default/isc-dhcp-server /etc/default/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/default/isc-dhcp-server -- backup done"
  (sudo cp /etc/dhcp/dhclient.conf /etc/dhcp/dhclient.conf.bak) 2> /dev/null
  sudo cp etc/dhcp/dhclient.conf /etc/dhcp/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/dhcp/dhclient.conf -- backup done"
  (sudo cp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.bak) 2> /dev/null
  sudo cp etc/dhcp/dhcpd.conf /etc/dhcp/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/dhcp/dhcpd.conf -- backup done"
  (sudo cp /etc/hostapd/hostapd.conf /etc/hostapd/hostapd.conf.bak) 2> /dev/null
  sudo cp etc/hostapd/hostapd.conf /etc/hostapd/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/hostapd/hostapd.conf -- backup done"
  (sudo cp /etc/iptables.ipv4.nat /etc/iptables.ipv4.nat.bak) 2> /dev/null
  sudo cp etc/iptables.ipv4.nat /etc/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/iptables.ipv4.nat -- backup done"
  (sudo cp /etc/motd /etc/motd.bak) 2> /dev/null
  sudo cp etc/motd /etc/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/motd -- backup done"
  (sudo cp /etc/network/interfaces /etc/network/interfaces.bak) 2> /dev/null
  sudo cp etc/network/interfaces /etc/network/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/network/interfaces -- backup done"
  (sudo cp /etc/rc.local /etc/rc.local.bak) 2> /dev/null
  if [ "$CHECK_OS" == "Debian" ] || [ "$CHECK_OS" == "Ubuntu" ]; then
    sudo cp etc/rc.local.ubuntu /etc/rc.local
    sudo chmod a+x /etc/rc.local
  else
    sudo cp etc/rc.local /etc/
  fi
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/rc.local -- backup done"
  if [ "$CHECK_OS" == "Ubuntu" ]; then
    # Unlike the Raspberry Pi OS, Ubuntu uses systemd-resolved to resolve DNS queries (see also further below).
    # To work correctly in a captive portal environement, we have to set the following options in /etc/systemd/resolved.conf:
    # LLMNR=yes / MulticastDNS=yes / Chache=no
    (sudo cp /etc/systemd/resolved.conf /etc/systemd/resolved.conf.bak) 2> /dev/null
    sudo cp etc/systemd/resolved.conf /etc/systemd/
    echo -e "${RED}[+]${NOCOLOR}         Copied /etc/systemd/resolved.conf -- backup done"
  fi
  if grep -q "#net.ipv4.ip_forward=1" /etc/sysctl.conf ; then
    sudo cp /etc/sysctl.conf /etc/sysctl.conf.bak
    sudo sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
    echo -e "${RED}[+]${NOCOLOR} Changed /etc/sysctl.conf -- backup done"
  fi
  (sudo cp /etc/tor/torrc /etc/tor/torrc.bak) 2> /dev/null
  sudo cp etc/tor/torrc /etc/tor/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/tor/torrc -- backup done"
  echo -e "${RED}[+]${NOCOLOR} Activating IP forwarding"
  sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
  echo -e "${RED}[+]${NOCOLOR} Changing .profile if necessary"
  if ! grep "# Added by TorBox" ../.profile ; then
    sudo cp ../.profile ../.profile.bak
    sudo printf "\n# Added by TorBox\ncd torbox\n./menu\n" | sudo tee -a ../.profile
  fi
  sudo cp etc/new_ident .
  echo -e "${RED}[+]${NOCOLOR} Copied new_ident -- backup not necessary"
  # This has to be at the end to avoid unnecessary error messages
  sudo hostnamectl set-hostname TorBox041
  (sudo cp /etc/hosts /etc/hosts.bak) 2> /dev/null
  sudo cp torbox/etc/hosts /etc/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/hosts -- backup done"
  echo ""
  echo -e "${WHITE}[+] FINISHED! TorBox's configuration files are now updated / reset! ${NOCOLOR}"
  sleep 5
}

# This function updates the TorBox menu
update_torbox_menu()
{
  clear
  echo -e "${RED}[!] Starting with the update...${NOCOLOR}"
  echo ""
  echo -e "${RED}[+] Reading configuration...${NOCOLOR}"
  # Save configuration
  PASSWORD=$(grep "^PASSWORD=" ${NEW_IDENT})
  SSH_FROM_INTERNET=$(grep "^SSH_FROM_INTERNET=" ${RUNFILE})
  TOR_CONTROL_PORT_ACCESS=$(grep "^TOR_CONTROL_PORT_ACCESS=" ${RUNFILE})
  BLOCK_HTTP=$(grep "^BLOCK_HTTP=" ${RUNFILE})
  LOGCHECK=$(grep "^LOGCHECK=" ${RUNFILE})
  INTERNET_IFACE=$(grep "^INTERNET_IFACE=" ${RUNFILE})
  CLIENT_IFACE=$(grep "^CLIENT_IFACE=" ${RUNFILE})
  sudo mv log_check_config.py ..
  # ======================
  cd
  echo -e "${RED}[+] Downloading TorBox menu from GitHub...${NOCOLOR}"
  if [ $TORCONNECT = 0 ]; then
    wget $TORBOXMENUURL
  else
    # IMPORTANT: THIS WILL NOT WORK WITH A CAPTCHA!
    torsocks wget $TORBOXMENUURL
  fi
  if [ -e master.zip ]; then
    TORBOX_UPDATE=1
    echo -e "${RED}[+] Unpacking TorBox menu...${NOCOLOR}"
    unzip master.zip
    echo -e "${RED}[+] Removing the old one...${NOCOLOR}"
    sudo rm -r torbox/*
    echo -e "${RED}[+] Moving the new one...${NOCOLOR}"
    mv TorBox-master/* torbox/
    echo -e "${RED}[+] Cleaning up...${NOCOLOR}"
    rm -r TorBox-master
    rm -r master.zip
    cd torbox
    echo -e "${RED}[+] Writing configuration...${NOCOLOR}"
    # Restore configuration
    sudo sed -i "s/^PASSWORD=.*/${PASSWORD}/g" ${NEW_IDENT}
    sudo sed -i "s/^SSH_FROM_INTERNET=.*/${SSH_FROM_INTERNET}/g" ${RUNFILE}
    sudo sed -i "s/^TOR_CONTROL_PORT_ACCESS=.*/${TOR_CONTROL_PORT_ACCESS}/g" ${RUNFILE}
    sudo sed -i "s/^BLOCK_HTTP=.*/${BLOCK_HTTP}/g" ${RUNFILE}
    sudo sed -i "s/^LOGCHECK=.*/${LOGCHECK}/g" ${RUNFILE}
    sudo sed -i "s/^INTERNET_IFACE=.*/${INTERNET_IFACE}/g" ${RUNFILE}
    sudo sed -i "s/^CLIENT_IFACE=.*/${CLIENT_IFACE}/g" ${RUNFILE}
    sudo mv ../log_check_config.py .
    # ======================
    echo -e "${RED} ${NOCOLOR}"
    echo -e "${WHITE}[+] SUCCESS! TorBox menu is now updated!${NOCOLOR}"
    sleep 5
  else
    echo -e "${RED} ${NOCOLOR}"
    echo -e "${WHITE}[!] FAILED!${NOCOLOR}"
    echo -e "${WHITE}[!] Downloading TorBox menu from GitHub has failed !!${NOCOLOR}"
    echo -e "${WHITE}[!] I can't update TorBox menu !!${NOCOLOR}"
    echo -e "${WHITE}[!] You may try it later or manually !!${NOCOLOR}"
    sleep 5
  fi
}

###### DISPLAY THE AVAILABLE OPTIONS ######
CHOICE=$(whiptail --nocancel --title "TorBox v.0.4.1 - UPDATE & RESET OPTIONS" --checklist --separate-output "Choose with SPACE and then press ENTER (ESC -> go back)" $MENU_HEIGHT $MENU_WIDTH $MENU_LIST_HEIGHT \
"1" "Update the base system (reboot recommended!)" OFF \
"2" "Update additional network drivers (reboot required!)" OFF \
"3" "Update the firmware of the RPI 4 (reboot required!)" OFF \
"4" "Change/update the version of Tor" OFF \
"5" "Update to the newest stable version of the TorBox menu" OFF \
"6" "Erase all log files" OFF \
"7" "Erase all passwords in the TWM (reboot required!)" OFF \
"8" "Update & Reset TorBox's configuration files (dangerous!)" OFF \
"9" "Reset Tor and force a change of the permanent entry node" OFF \
"10" "Remove permanently OBFS4 Bridge Relay data" OFF \
"11" "Just fixing and cleaning" OFF 3>&1 1>&2 2>&3)

exitstatus=$?

if [ $exitstatus = 0 ]; then
  mapfile -t CHOICE <<< "$CHOICE"
  for ARGUMENT in "${CHOICE[@]}"; do
    LOOP_NUMBER=$(( $LOOP_NUMBER + 1 ))
    if [ "$ARGUMENT" = "" ]; then
      exit 0
    fi

#This updates the base system (because of performance considerations over clearnet)
    if [ $ARGUMENT = 1 ]; then
      whiptail --title "TorBox - INFO" --textbox text/update-text $MENU_HEIGHT_25 $MENU_WIDTH
      clear
 			KERNEL_VERS=$(uname -s -r)
      TOR_VERS=$(tor --version|rev|cut -c2-|rev)
			INPUT="\nThis is the version of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS\n\nWould you like to update the base system to the newest version?"
      if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
        online_check update
        TORCONNECT=0
        set_sources_list
        clear
        sudo apt-get -y update
        sudo apt-get -y dist-upgrade
        sudo systemctl unmask hostapd
        sudo systemctl enable hostapd
        sudo systemctl enable isc-dhcp-server
        # Copy not moving!
        sudo cp /usr/share/tor/geoip* /usr/bin
        sudo setcap 'cap_net_bind_service=+ep' /usr/bin/obfs4proxy
        sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@default.service
        sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@.service
        sudo systemctl enable tor
        sudo systemctl daemon-reload
        echo ""
        echo -e "${WHITE}[+] FINISHED! TorBox's base system is now updated!${NOCOLOR}"
        sleep 5
        BOOTMSG=1
      fi

# This updates additional network drivers (because of performance considerations over clearnet)
  elif [ $ARGUMENT = 2 ]; then
      kernelversion=$(uname -rv | cut -d ' ' -f1-2 | tr '+' ' ' | tr '#' ' ' | sed -e "s/[[:space:]]\+/-/g")
      if [ $LOOP_NUMBER = 1 ]; then
        INPUT=$(cat text/install_network_drivers-text)
        if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT $MENU_WIDTH); then
          bash install_network_drivers
          BOOTMSG=1
          LOOP_NUMBER=0
        fi
      else
        bash install_network_drivers
        BOOTMSG=1
        LOOP_NUMBER=0
      fi

#This updates the firmware on a RPI4 (because of performance considerations over clearnet)
  elif [ $ARGUMENT = 3 ]; then
    if [ ! -z "$CHECK_HD3" ] || [ ! -z "$CHECK_HD4" ]; then
      if [ $LOOP_NUMBER = 1 ]; then
        INPUT=$(cat text/firmware_update-text)
        if (whiptail --defaultno --yesno "$INPUT" 16 $MENU_WIDTH); then
          update_firmware
          BOOTMSG=1
          LOOP_NUMBER=0
        fi
      else
        update_firmware
        BOOTMSG=1
        LOOP_NUMBER=0
      fi
    else
      clear
      echo -e "${WHITE}[!] ATTENTION! Updating the firmware is only supported by the RPI4!${NOCOLOR}"
      echo -e "${WHITE}[!] The used hardware was not identified as a RPI4, why we don't try ${NOCOLOR}"
      echo -e "${WHITE}[!] to update the firmware. ${NOCOLOR}"
      sleep 10
    fi

#This changes/updates the installed Tor version
  elif [ $ARGUMENT = 4 ]; then
    # Avoid cheap censorship mechanisms
    online_check update
    if [ $TORCONNECT = 0 ]; then
      INPUT=$(cat text/clearnet_warning-text)
      if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
        sleep 1
      else
        trap "screen bash update; exit 0" EXIT
        exit 0
      fi
    fi
    set_sources_list
    INPUT=$(cat text/update-tor-text)
    if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --defaultno --no-button "DEFAULT" --yes-button "EXPERT" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      select_and_install_tor
      FINISHING=$?
    else
      update_tor
      FINISHING=$?
    fi
    # Finishing
    cd ~/torbox
    if [ -d ~/debian-packages ] ; then sudo rm -r ~/debian-packages ; fi
    sudo cp /etc/apt/sources.list.bak /etc/apt/sources.list
    if [ $FINISHING = 1 ] ; then
      (sudo mv /usr/local/bin/tor* /usr/bin) 2> /dev/null
      # sudo apt-get install tor-geoipdb
      # Copy not moving!
      (sudo cp /usr/share/tor/geoip* /usr/bin) 2> /dev/null
      sudo chmod a+x /usr/bin/geoip*
      sudo setcap 'cap_net_bind_service=+ep' /usr/bin/obfs4proxy
      sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@default.service
      sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@.service
      sudo systemctl stop tor
      sudo systemctl enable tor
      sudo systemctl daemon-reload
      sudo systemctl start tor
      TOR_VERS=""
      TOR_VERS=$(tor --version|head -n 1|rev|cut -c2-|rev|cut -d " " -f3)
      echo ""
      echo -e "${WHITE}[+] FINISHED! Installed Tor version: $TOR_VERS${NOCOLOR}"
      read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
    fi

#This updates the newest stable version of TorBox's menu
  elif [ $ARGUMENT = 5 ]; then
      if [ $LOOP_NUMBER = 1 ]; then
        INPUT=$(cat text/torbox_update-text)
        if (whiptail --defaultno --yesno "$INPUT" 18 $MENU_WIDTH); then
          online_check update
          if [ $TORCONNECT = 0 ]; then
            INPUT=$(cat text/clearnet_warning-text)
            if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
              sleep 1
            else
              trap "screen bash update; exit 0" EXIT
              exit 0
            fi
          fi
          update_torbox_menu
        fi
      else
        online_check update
        if [ $TORCONNECT = 0 ]; then
          INPUT=$(cat text/clearnet_warning-text)
          if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
            sleep 1
          else
            trap "screen bash update; exit 0" EXIT
            exit 0
          fi
        fi
        update_torbox_menu
      fi
      exit 0

#This erases all log files
  elif [ $ARGUMENT = 6 ]; then
      clear
      erase_logs
      echo ""
      echo -e "${WHITE}[+] FINISHED! All log files erased!${NOCOLOR}"
      sleep 5

#Erase all passwords in Torbox Wireless Manager
  elif [ $ARGUMENT = 7 ]; then
      INPUT=$(cat text/erase_TWM_pwd-text)
      if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
        echo -e "${RED}[+] Erasing all passwords in the Torbox Wireless Manager...${NOCOLOR}"
        (sudo rm /etc/wpa_supplicant/wpa_supplicant-wlan0.conf) 2> /dev/null
        (sudo rm /etc/wpa_supplicant/wpa_supplicant-wlan1.conf) 2> /dev/null
        sleep 2
        echo -e "${WHITE}[+] FINISHED!${NOCOLOR}"
        BOOTMSG=1
        sleep 2
      fi

#This updates / resets TorBox's configuration files
  elif [ $ARGUMENT = 8 ]; then
      if [ $TORBOX_UPDATE = 0 ]; then
        INPUT=$(cat text/torboxcfg_update-text)
        if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
          update_torcfg
          BOOTMSG=1
        fi
      else
        update_torcfg
        BOOTMSG=1
      fi

#This resets Tor and forces a change of the permanent entry node
  elif [ $ARGUMENT = 9 ]; then
      INPUT=$(cat text/tor-reset-text)
      if (whiptail --title "TorBox - INFO" --defaultno  --yesno "$INPUT" 18 $MENU_WIDTH); then
        clear
        MODE_BRIDGES=$(grep "^UseBridges" ${TORRC})
        echo -e "${RED}[+] Stopping Tor...${NOCOLOR}"
        sudo systemctl stop tor
        sleep 2
        echo -e "${RED}[+] Deactivating Bridge mode or Bridge Relay...${NOCOLOR}"
        deactivating_bridge_relay
        if [ "$MODE_BRIDGES" = "UseBridges 1" ]; then
          sudo sed -i "s/^UseBridges/#UseBridges/g" ${TORRC}
          sudo sed -i "s/^UpdateBridgesFromAuthority/#UpdateBridgesFromAuthority/g" ${TORRC}
          sudo sed -i "s/^ClientTransport/#ClientTransport/g" ${TORRC}
          #Deaktivate all sort of bridges obfs4 and meek-azure
          sudo sed -i "s/^Bridge/#Bridge/g" ${TORRC}
        fi
        echo -e "${RED}[+] Deleting all circuits and forcing a change of the permanent entry node${NOCOLOR}"
        (sudo rm -r /var/lib/tor/cached-certs) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-consensus) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-descriptors) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-descriptors.new) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-microdesc-consensus) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-microdescs) 2> /dev/null
        (sudo rm -r /var/lib/tor/cached-microdescs.new) 2> /dev/null
        (sudo rm -r /var/lib/tor/diff-cache) 2> /dev/null
        (sudo rm -r /var/lib/tor/lock) 2> /dev/null
        (sudo rm -r /var/lib/tor/state) 2> /dev/null
        sleep 2
        echo -e "${RED}[+] Resetting Tor statistics...${NOCOLOR}"
        sudo rm /var/log/tor/notices.log
        sudo touch /var/log/tor/notices.log
        sudo chown debian-tor /var/log/tor/notices.log
        echo -e "${RED}[+] Done!${NOCOLOR}"
        sleep 4
        restarting_tor update
      fi

#This permanently removes Bridge Relay data
  elif [ $ARGUMENT = 10 ]; then
      INPUT=$(cat text/remove-brdata-text)
      if (whiptail --title "TorBox - INFO" --defaultno  --yesno "$INPUT" 18 $MENU_WIDTH); then
        clear
        echo -e "${RED}[+] Deactivating Bridge mode or Bridge Relay...${NOCOLOR}"
        deactivating_bridge_relay
        echo -e "${RED}[+] Removing Bridge Relay data${NOCOLOR}"
        (sudo rm -r /var/lib/tor/keys) 2> /dev/null
        (sudo rm /var/lib/tor/fingerprint) 2> /dev/null
        (sudo rm /var/lib/tor/hashed-fingerprint) 2> /dev/null
        (sudo rm -r /var/lib/tor/pt_state) 2> /dev/null
        echo -e "${RED}[+] Done!${NOCOLOR}"
        sleep 4
        restarting_tor update
      fi

#Just fixing and cleaning
  elif [ $ARGUMENT = 11 ]; then
       clear
    fi
  done

# Fixing and Cleaning - Regardless of whether something has been changed or not. Just to be sure that all works properly.
  clear
  echo -e "${RED}[+] Set the correct time...${NOCOLOR}"
  sudo /usr/sbin/ntpdate pool.ntp.org
  sleep 3
  echo " "
  echo -e "${RED}[+] Fixing and cleaning...${NOCOLOR}"
  sudo apt --fix-broken install
  sudo apt-get -y clean; sudo apt-get -y autoclean; sudo apt-get -y autoremove
  sudo setcap 'cap_net_bind_service=+ep' /usr/bin/obfs4proxy
  sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@default.service
  sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@.service
  sudo systemctl daemon-reload
  sleep 3
  if [ $BOOTMSG = 1 ]; then recommended_reboot; fi
else
  clear
  exit 0
fi
bash update
exit 0
