#!/bin/bash
# shellcheck disable=SC2001,SC2034,SC2064

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2024 radio24
# Contact: anonym@torbox.ch
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file is a library for the TorBox menu.
# It contains functions which are used in several scripts.
# Hopefully, this way the scripts stay short and clear.
#
# SYNTAX
# source lib/torbox.lib
#
#
##### SET VARIABLES ######
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_20=20
MENU_HEIGHT_15=15

#Colors
RED='\033[1;31m'
YELLOW='\033[1;93m'
GREEN='\033[1;32m'
NOCOLOR='\033[0m'

#Other variables
TORRC="/etc/tor/torrc"
TORBOX_PATH="/home/torbox/torbox"
TXT_DIR="$TORBOX_PATH/text"
RUNFILE="$TORBOX_PATH/run/torbox.run"

#Connectivity check
CHECK_URL=$(grep "^PING_SERVER=" ${RUNFILE} | sed "s/.*=//g") 2>/dev/null

##############################
######## FUNCTIONS ###########

# check_tor()
# Used predefined variables: RED, NOCOLOR
# This function checks the status on https://check.torproject.org/api/ip
check_tor()
{
	clear
	echo -e "${RED}[+] Checking connectivity to the Tor network - please wait...${NOCOLOR}"
	sleep 1
	IS_TOR=$(curl -x socks5h://127.0.0.1:9050 -m 5 -s https://check.torproject.org/api/ip | grep -oP '"IsTor"\s*:\s*\K\w+')

	if [ $IS_TOR = true ]; then
  	TOR_STATUS="TOR is working"
	else
  	TOR_STATUS=""
	fi
	clear
}

# check_interface_with_internet()
# Used predefined variables: RED, NOCOLOR, RUNFILE
# This function tests from where the Internet is coming
# Following variables can be used: FLASH_*, CONNECTED
check_interface_with_internet()
{
	CONNECTED=0
	clear
	echo -e "${RED}[+] Checking connectivity to the Internet - please wait...${NOCOLOR}"
	sleep 1
	IINTERFACE=""
	IINTERFACE=$(sudo timeout 5 sudo route | grep -m 1 tun0 | tr -s " " | cut -d " " -f1)
	if [ ! -z "$IINTERFACE" ] ; then
  	VPN_STATUS="VPN is up"
  	IIPTABLES=""
  	IIPTABLES=$(sudo iptables -t nat -L -v | grep MASQUERADE | grep tun0)
	else
  	VPN_STATUS=""
	fi
	if [ "$IINTERFACE" = "0.0.0.0" ] && [ ! -z "$IIPTABLES" ] ; then
  	FLASH_TUN0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=tun0/" ${RUNFILE}
  	CONNECTED=1
	else
  	IINTERFACE=$(sudo timeout 5 sudo route | grep -m 1 default | tr -s " " | cut -d " " -f8)
  	if [ "$IINTERFACE" = "eth0" ] ; then FLASH_ETH0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=eth0/" ${RUNFILE}; CONNECTED=1; fi
  	if [ "$IINTERFACE" = "eth1" ] ; then FLASH_ETH1="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=eth1/" ${RUNFILE}; CONNECTED=1; fi
  	if [ "$IINTERFACE" = "wlan0" ] ; then FLASH_WLAN0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=wlan0/" ${RUNFILE}; CONNECTED=1; fi
  	if [ "$IINTERFACE" = "wlan1" ] ; then FLASH_WLAN1="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=wlan1/" ${RUNFILE}; CONNECTED=1; fi
  	if [ "$IINTERFACE" = "usb0" ] ; then FLASH_USB0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=usb0/" ${RUNFILE}; CONNECTED=1; fi
  	if [ "$IINTERFACE" = "usb0" ] ; then FLASH_USB0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=usb0/" ${RUNFILE}; CONNECTED=1; fi
  	if [ "$IINTERFACE" = "ppp0" ] ; then FLASH_USB0="<--" ; sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=ppp0/" ${RUNFILE}; CONNECTED=1; fi
	fi
}

# settime()
# Automatically synchronize the time with ntpdate and, if necessary, fall back to manual mode
# Syntax settime
# Used predefined variables: RED, YELLOW, NOCOLOR
# Used predefined function: check_interface_with_internet()
settime()
{
	unset REPLY
	echo -e "${YELLOW}[!] SYSTEM-TIME CHECK${NOCOLOR}"
	echo -e "${RED}[!] Tor needs a correctly synchronized time.${NOCOLOR}"
	echo -e "${RED}    The system should display the current UTC time:${NOCOLOR}"
	echo
	echo -e "             Date: ${YELLOW}$(date '+%Y-%m-%d')${NOCOLOR}"
	$TORBOX_PATH/bin/clock.py
	echo
	echo -e "${RED}    You can find the correct time here: ${YELLOW}https://time.is/UTC${NOCOLOR}"
	echo
	while true
	do
		read -r -p $'\e[1;31m    Do you want to adjust the system time [Y/n]? -> \e[0m'
		# The following line is for the prompt to appear on a new line.
		if [[ $REPLY =~ ^[YyNn]$ ]] ; then
			echo
			echo
			break
		fi
	done
	if [[ $REPLY =~ ^[Yy]$ ]] ; then
		check_interface_with_internet
		clear
		sudo timedatectl set-timezone UTC
		MANUAL=0
		if [ $CONNECTED == 1 ]; then
			if curl -m 6 -s "https://www.ntp.org" >/dev/null; then
				echo -e "${RED}[+] Set the correct time...${NOCOLOR}"
				sudo /usr/sbin/ntpdate pool.ntp.org
				echo
				echo -e "${RED}[+] Date and time set successfully!"
				sleep 5
				clear
			else
				MANUAL=1
			fi
		else
			MANUAL=1
		fi
		if [ $MANUAL == 1 ]; then
			echo -e "${YELLOW}[!] CANNOT SYNCHRONIZE DATE/TIME AUTOMATICALLY${NOCOLOR}"
			echo ""
			read -r -p $'\e[1;31mPlease enter the date (YYYY-MM-DD): \e[0m' DATESTRING
			echo ""
			echo -e "${RED}Please enter the UTC time (HH:MM)${NOCOLOR}"
			read -r -p $'You can find the correct time here: https://time.is/UTC: ' TIMESTRING
			# Check and set date
			if [[ $DATESTRING =~ ^[1-2]{1}[0-9]{3}-[0-9]{2}-[0-9]{2}$ ]]; then
				echo ""
				sudo date -s "$DATESTRING"
				echo -e "${RED}[+] Date set successfully!${NOCOLOR}"
				if [[ $TIMESTRING =~ ^[0-9]{2}:[0-9]{2}$ ]]; then
					echo ""
					sudo date -s "$TIMESTRING"
					echo -e "${RED}[+] Time set successfully!${NOCOLOR}"
					sleep 5
					clear
				else
					echo ""
					echo -e "${YELLOW}[!] INVALIDE TIME FORMAT!${NOCOLOR}"
					echo ""
					read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
					clear
				fi
			else
				echo ""
				echo -e "${YELLOW}[!] INVALIDE DATE FORMAT!${NOCOLOR}"
				echo ""
				read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
				clear
			fi
		fi
	fi
}

# This function checks if a variable is an integer
# Syntax is_integer [<variable_to_check>]
is_integer()
{
	printf %d "${1}" >/dev/null 2>&1 || ERROR="1";
 	if [ "$ERROR" == "1" ]; then
   	false
 	fi
}

# add_open_dns()
# Syntax add_open_dns
# Used predefined variables: RED, NOCOLOR, RUNFILE
# This function adds some open nameservers to avoid cheap censorship mechanisms.
add_open_dns()
{
  echo -e "${RED}[+] Let's add some open nameservers to avoid cheap censorship mechanisms...${NOCOLOR}"
  echo -e "${RED}[+] These nameservers are only used for local resolution. All clients DNS${NOCOLOR}"
  echo -e "${RED}[+] request are handled through Tor.${NOCOLOR}"
  NAMESERVERS=$(grep "^NAMESERVERS=" ${RUNFILE} | sed "s/.*=//g") 2>/dev/null
  ONE_NAMESERVER=$(cut -d ',' -f1 <<< $NAMESERVERS)
  NAMESERVERS=$(cut -f2- -d ',' <<< $NAMESERVERS)
  i=0
  while [ "$ONE_NAMESERVER" != " " ]
  do
    if [ $i = 0 ]; then
      (sudo cp /etc/resolv.conf /etc/resolv.conf.bak) 2>/dev/null
      (printf "# Generated by TorBox instead of resolvconf\n" | sudo tee /etc/resolv.conf) &>/dev/null
    fi
    (printf %s"nameserver $ONE_NAMESERVER\n" | sudo tee -a /etc/resolv.conf) &>/dev/null
    i=$((i+1))
    if [ "$ONE_NAMESERVER" = "$NAMESERVERS" ]; then
      ONE_NAMESERVER=" "
    else
      ONE_NAMESERVER=$(cut -d ',' -f1 <<< $NAMESERVERS)
      NAMESERVERS=$(cut -f2- -d ',' <<< $NAMESERVERS)
    fi
  done
}

# online_check()
# Syntax online_check [<check_url>] [<no_connection_warning>] [<clearnet_warning>]
# <check_url> -> Check if TorBox can reach this URL. If <check_url> is missing or "default", the URL defined under "PING_SERVER=" in run/torbox.run is used.
# <no_connection_warning> -> missing or 0 don't warn if no connection / 1 warn if no connection
# <clearnet_warning> -> missing or 0 doesn't warn and doesn't check clearnet - enforces tor connection only / 1 warn before accessing clearnet
# <no_connection_warning> missing && <clearnet_warning> missing -> checks ONLY clearnet
# Used predefined variables: RED, NOCOLOR, MENU_HEIGHT_15, MENU_HEIGHT_20, MENU_WIDTH
# This function checks the internet connection, if the connection made through tor or clearnet and if no connection, it exits to <source_script>.
# Following variables can be used:
# OCHECK = 0     -> No internet conection
# OCHECK = 1     -> Internet is connected
# TORCONNECT = 0 -> Connection through tor not possible
# TORCONNECT = 1 -> Connection through tor possible
# TOR_DNS = 0    -> DNS resolution through tor not possible
# TOR_DNS = 1    -> DNS resolution through tor possible
# CLEARNET_DECISION = 0 -> The calling script should not use clearnet (this is not really necessary, because the function will stop the execution).
# CLEARNET_DECISION = 1 -> The calling script can use clearnet
online_check()
{
  # Define all variables
  RUNFILE="/home/torbox/torbox/run/torbox.run"
	CHECK_URL=$1
  if [ -z "$CHECK_URL" ] || [ "$CHECK_URL" == "default" ]; then
    CHECK_URL=$(grep "^PING_SERVER=" ${RUNFILE} | sed "s/.*=//g") 2>/dev/null
  fi
  NO_CONNECTION_WARNING=$2
  if [ -z "$NO_CONNECTION_WARNING" ]; then NO_CONNECTION_WARNING=0; fi
  CLEARNET_WARNING=$3
  if [ -z "$CLEARNET_WARNING" ]; then CLEARNET_WARNING=0; fi
  # Don't change it to "-z" !
  if [ "$NO_CONNECTION_WARNING" == "0" ] && [ "$CLEARNET_WARNING" == "0" ]; then
    CLEARNET_ONLY=1
	else
		CLEARNET_ONLY=0
  fi
  OCHECK=0
  TORCONNECT=0
  CLEARNET_DECISION=0
	TOR_DNS=1

  # Start working!
  add_open_dns
  echo " "
  echo -e "${RED}[+] Please wait...${NOCOLOR}"
  sleep 15
  clear
  echo -e "${RED}[+] Checking internet connectivity - please wait...${NOCOLOR}"

  # Always executed until except if a not tor related URL wants to check the online status (used in menu-config and in update).
  # Don't change it to "-z" !
  if [ "$CLEARNET_ONLY" == "0" ]; then
    #-m 6 must not be lower, otherwise it looks like there is no connection! ALSO IMPORTANT: THIS WILL NOT WORK WITH A CAPTCHA!
    if curl -x socks5h://127.0.0.1:9050 -m 6 -s $CHECK_URL >/dev/null; then
      OCHECK=1
      TORCONNECT=1
    else
      sleep 10
      OCHECK=0
      TORCONNECT=0
      # Don't change it to "! -z" !
      if [ "$CLEARNET_WARNING" == "1" ]; then
        INPUT=$(cat $TXT_DIR/clearnet_warning-text)
        if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
          CLEARNET_DECISION=1
          if curl -m 6 -s $CHECK_URL >/dev/null; then
            OCHECK=1
            TORCONNECT=0
						TOR_DNS=1
          else
						if curl -m 6 -s $CHECK_URL >/dev/null; then
							OCHECK=1
							TORCONNECT=0
							TOR_DNS=0
						else
							OCHECK=0
							TORCONNECT=0
							TOR_DNS=0
						fi
          fi
        else
          CLEARNET_DECISION=0
          OCHECK=0;
          TORCONNECT=0
        fi
				clear
      else
        CLEARNET_DECISION=0
        OCHECK=0;
        TORCONNECT=0
      fi
    fi
  fi

# Only executed for not tor related URL (usually, in this case online_check was executed without options; used in menu-config and in update)
  if [ "$CLEARNET_ONLY" == "1" ]; then
    CLEARNET_DECISION=1
    if curl -m 6 -s $CHECK_URL >/dev/null; then
      OCHECK=1
      TORCONNECT=0
			TOR_DNS=1
    else
			if curl -m 6 -s $CHECK_URL >/dev/null; then
				OCHECK=1
				TORCONNECT=0
				TOR_DNS=0
			else
				OCHECK=0
				TORCONNECT=0
				TOR_DNS=0
			fi
    fi
  fi

  # ""$NO_CONNECTION_WARNING" = "1" means that there is a varning displayed if TorBox has no connection
  if [ "$OCHECK" == "0" ] && [ "$NO_CONNECTION_WARNING" = "1" ]; then
    INPUT="It seems that your TorBox is not properly connected to the internet! For this operation, TorBox to be properly connected with the internet!\n\nAre you really sure to continue without proper internet connection (I guess, you know what you are doing)?"
    if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
      OCHECK=1
    fi
  fi
}

# erase_logs()
# Used predefined variables: RED, NOCOLOR
# This function flushes all LOG-files in /var/log and ~/.bash_history.
erase_logs()
{
  echo -e "${RED}[+] Erasing ALL LOG-files...${NOCOLOR}"
  for logs in $(sudo find /var/log -type f); do
  	echo -e "${RED}[+]${NOCOLOR} Erasing $logs"
  	sudo rm $logs
  	sleep 1
  done
	sudo journalctl --vacuum-size=1M
	echo -e "${RED}[+]${NOCOLOR} Erasing nohup files"
	find /home/torbox/ -name nohup -exec sudo rm {} \;
  echo -e "${RED}[+]${NOCOLOR} Erasing .bash_history"
  (sudo rm ../.bash_history) 2>/dev/null
  history -c
	(sudo -u debian-tor touch /var/log/tor/notices.log) 2>/dev/null
	(sudo chmod -R go-rwx /var/log/tor/notices.log) 2>/dev/null
	TOR_STATUS=$(sudo systemctl is-enabled tor@default.service)
	if [ "$TOR_STATUS" != "masked" ]; then
		echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
		(sudo systemctl restart tor) 2>/dev/null
		echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
	fi
}

# This function imports the configuration and makes some preparations
do_we_use_bridges()
{
	# Do we use bridges?
  MODE_BRIDGES=$(grep "^UseBridges" ${TORRC})

	# Do we use bridges? If yes, witch kind of?
  DO_WE_USE_BRIDGES=$(grep -o "^Bridge obfs4 " ${TORRC} | head -1) 2>/dev/null

  if [ "$DO_WE_USE_BRIDGES" = "Bridge obfs4 " ]; then
      OBFS4STRING="ON!"
      OBFS4STRINGb="Deactivate"
      BRIDGESTRING="       OBFS4 ON!"
			MMENUSTRING="OBFS4 IS ON"
			#Needed for menu-bridges
			MODE_OBFS4=$DO_WE_USE_BRIDGES
  else
      OBFS4STRING="OFF"
      OBFS4STRINGb="Activate"
  fi

  # MEEKSTRING represents the status of the Meek-Azure bridging mode
  DO_WE_USE_BRIDGES=$(grep -o "^Bridge meek_lite " ${TORRC} | head -1) 2>/dev/null

  if [ "$DO_WE_USE_BRIDGES" = "Bridge meek_lite " ]; then
      MEEKSTRING="ON!"
      MEEKSTRINGb="Deactivate"
      BRIDGESTRING="  MEEK ON!"
			MMENUSTRING="MEEK IS ON"
			#Needed for menu-bridges
			MODE_MEEK=$DO_WE_USE_BRIDGES
  else
      MEEKSTRING="OFF"
      MEEKSTRINGb="Activate"
  fi

  # SNOWSTRING represents the status of the Snowflake bridging mode
  DO_WE_USE_BRIDGES=$(grep -o "^Bridge snowflake " ${TORRC} | head -1) 2>/dev/null

  if [ "$DO_WE_USE_BRIDGES" = "Bridge snowflake " ]; then
      SNOWSTRING="ON!"
      SNOWSTRINGb="Deactivate"
      BRIDGESTRING="   SNOWFLAKE ON!"
			MMENUSTRING="SNOWFLAKE IS ON"
			#Needed for menu-bridges
			MODE_SNOW=$DO_WE_USE_BRIDGES
  else
      SNOWSTRING="OFF"
      SNOWSTRINGb="Activate"
  fi

  if [ -z "${BRIDGESTRING}" ]; then
    BRIDGESTRING="Bridge mode OFF!"
  fi
}

# deactivating_bridge_relay()
# Used predefined variables: RED, NOCOLOR, TORRC
# This function deactivates the bridge relay.
deactivating_bridge_relay()
{
  MODE_BR=$(grep "BridgeRelay" ${TORRC})

  #The if clause below is necessary
  if [ "$MODE_BR" = "BridgeRelay 1" ]; then
    echo -e "${RED}[+] Deactivating Bridge Relay Mode...${NOCOLOR}"
    ORPORT=$(grep "^ORPort" ${TORRC})
    OBFS4PORT=$(grep "^ServerTransportListenAddr" ${TORRC})
    sORPORT=$(cut -d ' ' -f2 <<< $ORPORT)
    sOBFS4PORT=$(cut -d ':' -f2 <<< $OBFS4PORT)
  	sudo sed -i "s/^BridgeRelay/#BridgeRelay/g" ${TORRC}
  	sudo sed -i "s/^ORPort/#ORPort/g" ${TORRC}
  	sudo sed -i "s/^ExtORPort/#ExtORPort/g" ${TORRC}
  	sudo sed -i "s/^ServerTransportPlugin/#ServerTransportPlugin/g" ${TORRC}
  	sudo sed -i "s/^ServerTransportListenAddr/#ServerTransportListenAddr/g" ${TORRC}
  	sudo sed -i "s/^ContactInfo/#ContactInfo/g" ${TORRC}
  	sudo sed -i "s/^Nickname/#Nickname/g" ${TORRC}
    sudo sed -i "s/^BridgeDistribution/#BridgeDistribution/g" ${TORRC}
  	sleep 2
    echo -e "${RED}[+] Closing port ORPort $sORPORT and OBFS4Port $sOBFS4PORT (just ignore any error message)${NOCOLOR}"
  	(sudo iptables -D INPUT -p tcp --dport $sORPORT -j ACCEPT) 2>/dev/null
  	(sudo iptables -D INPUT -p tcp --dport $sOBFS4PORT -j ACCEPT) 2>/dev/null
    sleep 2
  fi
}

# restarting_tor(<source script>)
# Used predefined variables: RED, NOCOLOR
# This function restarts Tor
restarting_tor()
{
  SOURCE_SCRIPT=$1
  echo -e "${RED}[+] (Re)starting Tor!${NOCOLOR}"
  echo -e "${RED}[+] DONE! Checking progress - please be patient!${NOCOLOR}"
  echo -e "    Ignore any error messages; this can take a while; please wait..."
  echo -e "    Finally, you should see \"${YELLOW}Bootstrapped 100%: Done${NOCOLOR}\"."
  echo -e "    You can leave the progress report by pressing q."
  echo ""
	if [ ! -z "$SOURCE_SCRIPT" ]; then trap "bash $SOURCE_SCRIPT; exit 0" SIGINT; fi
	stty intr q
  sudo systemctl restart tor &
  sudo tail -f -n 0 /var/log/tor/notices.log | sed -u 's#.*Bootstrapped 100% (done): Done#\x1b[93m&\x1b[0m#' | sed -u 's#Bootstrapped 100% (done): Done#Bootstrapped 100% (done): Done -- YOU CAN PRESS NOW Q!#' | grep -v -e "Rejecting ill-formed reverse lookup" -e "Missing mapping for virtual address" -e "You configured a non-loopback address" -e "opening log file" -e "Application request when we haven't" -e "Giving up. (waiting for circuit)" -e "New control connection opened from" -e "While fetching directory info, no running dirservers known"
	stty intr ^c
	trap
}

# connecting_to_VPN()
# Used predefined variables: RED, YELLOW, NOCOLOR, MENU_HEIGHT_15, MENU_WIDTH_REDUX
# This function connects the TorBox to a VPN
connecting_to_VPN()
{
  clear
	# shellcheck disable=SC2012
  readarray -t ovpnlist < <(ls -1X ../openvpn/*.ovpn | sed "s/..\/openvpn\///" | sed "s/.ovpn//")
  if [ -z "${ovpnlist[0]}" ] ; then
    whiptail --title "TorBox - INFO" --textbox $TXT_DIR/no_tun0-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
    trap "bash menu; exit 0" EXIT
    exit 0
  fi
  ovpnlist_anzahl=${#ovpnlist[*]}
  anzahl_loops=$((ovpnlist_anzahl-1))
  menu_content=""
  for (( i=0; i<=anzahl_loops; i++ ))
  do
    menu_item=$((i+1))
    menu_content="$menu_content${RED}$menu_item${NOCOLOR} - ${ovpnlist[$i]}\n"
  done
  clear
  echo -e "${YELLOW}Choose an OpenVPN configuration:${NOCOLOR}"
  echo ""
  echo -e "$menu_content"
  echo ""
  read -r -p $'\e[1;93mWhich OpenVPN configuration (number) would you like to use? -> \e[0m'
  echo
  if [[ $REPLY =~ ^[1234567890]$ ]] ; then
    CHOICE_OVPN=$((REPLY-1))
    clear
    echo -e "${RED}[+] Connecting OpenVPN server...${NOCOLOR}"
    echo ""
    ovpn_file=../openvpn/${ovpnlist[$CHOICE_OVPN]}.ovpn
    sudo sed -i "s/^dev tun.*/dev tun0/" ${ovpn_file}
		if ! grep -q "auth-retry interact" ${ovpn_file}; then (printf "\nauth-retry interact") >/dev/null 2>&1 | tee -a ${ovpn_file}; fi
    sudo openvpn --daemon --config ../openvpn/${ovpnlist[$CHOICE_OVPN]}.ovpn
    echo ""
    echo -e "${RED}[+] Please wait, we need 15 second to configure the interface...${NOCOLOR}"
    sleep 15
		# To be sure that DNS rsolution works
		echo ""
		echo -e "${RED}[+] Checking DNS...${NOCOLOR}"
		if wget -q --spider "$CHECK_URL"; then
			echo -e "${RED}[+] Yes, DNS seems to work! :-)${NOCOLOR}"
		else
			echo -e "${YELLOW}[!] DNS doesn't seem to work :-(${NOCOLOR}"
			echo -e "${RED}[+] Let's try to fix it!${NOCOLOR}"
			echo ""
			add_open_dns
			# (sudo resolvconf -a tun0 </etc/resolv.conf) 2>/dev/null
			echo -e "${RED}[+] Checking DNS again...${NOCOLOR}"
			if wget -q --spider "$CHECK_URL"; then
				echo -e "${RED}[+] Yes, DNS seems to work, now! :-)${NOCOLOR}"
			else
				echo -e "${YELLOW}[!] Sorry, DNS doesn't seem to work - giving up :-(${NOCOLOR}"
			fi
		fi
  else
    trap "bash menu; exit 0" EXIT
    exit 0
  fi
}

# recommended_reboot(<trap-destination>)
# Used predefined variables: RED, NOCOLOR, MENU_HEIGHT_15, MENU_WIDTH_REDUX
# This function strongly recommends a reboot
recommended_reboot()
{
  TRAP_DESTINATION=$1
  if (whiptail --title "TorBox - INFO" --yes-button "REBOOT" --yesno "A reboot of the system is not only recomendend, but necessary!" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX) ; then
    clear
    echo -e "${RED}[+] Rebooting TorBox...${NOCOLOR}"
		sync
    sleep 2
    sudo reboot
  else
    if [ -z "$TRAP_DESTINATION" ] ; then
      clear
      exit 0
    else
      trap "cd ~/torbox; bash $TRAP_DESTINATION; exit 0" SIGINT
    fi
  fi
}

# service_menu <checklist|menu> <list_of_entries> [<additional_menu_text>] [number_of_lines_of_the_menu_text]
# Used predefined variables: $ENTRY_NUMBERS (empty, global variable)
# This function creates a ckeclist or a menu out of a <list_of_entries> and returns the global variable $ENTRY_NUMBERS.
# The entries in the <list_of_entries> must be separate by newlines (\n). _ serves as SPACE!
service_menu()
{
  DIALOG_TYPE="${1}"
	[ -z "$DIALOG_TYPE" ] && exit 1
  LIST_OF_ENTRIES="${2}"
	[ -z "$LIST_OF_ENTRIES" ] && exit 1
  ADDITIONAL_MENU_TEXT="${3}"
	NUMBER_OF_LINES=${4}
	if [ -z $NUMBER_OF_LINES ]; then
		NUMBER_OF_LINES=0
	else
		if [ $NUMBER_OF_LINES -lt 3 ]; then NUMBER_OF_LINES=0; fi
	fi
  i=0
  for ENTRY in $LIST_OF_ENTRIES; do
    i=$((i+1))
		# shellcheck disable=SC2001
		ENTRY=$(sed "s/%/ /g" <<< "$ENTRY")
		# This should make it possible to use SPACES
		ENTRY=$(sed "s/_/ /g" <<< "$ENTRY")
    case "${DIALOG_TYPE}" in
      checklist)
          if [ $i == 1 ]; then ENTRY_LIST="\"${i}\" \"${ENTRY}\" OFF"
        else ENTRY_LIST="$ENTRY_LIST \"${i}\" \"${ENTRY}\" OFF"; fi
      ;;
      menu)
          if [ $i == 1 ]; then ENTRY_LIST="\"==\" \"===============================================================\""; fi
          ENTRY_LIST="$ENTRY_LIST \"${i}\" \"${ENTRY} \""
      ;;
    esac
  done
  if [ "$DIALOG_TYPE" == "menu" ]; then
    ENTRY_LIST="$ENTRY_LIST \"==\" \"===============================================================\"";
    i=$((i+2))
  fi
  clear
	NUMBER_OF_LINES=$((i+NUMBER_OF_LINES+7))
  if [ $i -gt 14 ]; then i=14; fi
	if [ "$DIALOG_TYPE" == "checklist" ]; then
  	WHIPTAIL_LINE="whiptail --nocancel --title \"TorBox - INFO\" --$DIALOG_TYPE --separate-output \"\nChoose with SPACE and then press ENTER (ESC -> go back)${ADDITIONAL_MENU_TEXT}\" $NUMBER_OF_LINES 80 $i ${ENTRY_LIST} 3>&1 1>&2 2>&3"
	else
		WHIPTAIL_LINE="whiptail --nocancel --title \"TorBox - INFO\" --$DIALOG_TYPE --separate-output \"\nChoose with pressing ENTER (ESC -> go back)${ADDITIONAL_MENU_TEXT}\" $NUMBER_OF_LINES 80 $i ${ENTRY_LIST} 3>&1 1>&2 2>&3"
	fi
	CHOICE_ENTRY=$(eval $WHIPTAIL_LINE)
	exitstatus=$?
  [ ! -z "${CHOICE_ENTRY}" ] && ENTRY_NUMBERS=$(printf %s"${CHOICE_ENTRY}")
}

# number_of_obfs4_bridges()
# Used predefined variables: TORRC
# How many OBFS4 bridges do we have? readarray reads into an array beginning with index 0
# Following variables can be used:
# $configured_bridges_deactivated -> An array with all deactivated OBFS4 bridges
# $configured_bridges_activated -> An array with all activated OBFS4 bridges
# $number_configured_bridges_deactivated -> Number of deactivated bridges
# $number_configured_bridges_activated -> Number of activated bridges
# $number_configured_bridges_total -> Total number of bridges
number_of_obfs4_bridges()
{
  readarray -t configured_bridges_deactivated < <(grep "^#Bridge obfs4 " ${TORRC})
  readarray -t configured_bridges_activated < <(grep "^Bridge obfs4 " ${TORRC})
  if [ ${#configured_bridges_deactivated[0]} = 0 ]; then
    number_configured_bridges_deactivated=0
  else
    number_configured_bridges_deactivated=${#configured_bridges_deactivated[*]}
  fi
  if [ ${#configured_bridges_activated[0]} = 0 ]; then
    number_configured_bridges_activated=0
  else
    number_configured_bridges_activated=${#configured_bridges_activated[*]}
  fi
  number_configured_bridges_total=$((number_configured_bridges_deactivated+number_configured_bridges_activated))
}

# number_of_snowflake_bridges()
# Used predefined variables: TORRC
# How many Snowflake bridges do we have? readarray reads into an array beginning with index 0
# Following variables can be used:
# $configured_snowflake_bridges_deactivated -> An array with all deactivated Snowflake bridges
# $configured_snowflake_bridges_activated -> An array with all activated Snowflake bridges
# $number_configured_snowflake_bridges_deactivated -> Number of deactivated bridges
# $number_configured_snowflake_bridges_activated -> Number of activated bridges
# $number_configured_snowflake_bridges_total -> Total number of bridges
number_of_snowflake_bridges()
{
  readarray -t configured_snowflake_bridges_deactivated < <(grep "^#Bridge snowflake " ${TORRC})
  readarray -t configured_snowflake_bridges_activated < <(grep "^Bridge snowflake " ${TORRC})
  if [ ${#configured_snowflake_bridges_deactivated[0]} = 0 ]; then
    number_configured_snowflake_bridges_deactivated=0
  else
    number_configured_snowflake_bridges_deactivated=${#configured_snowflake_bridges_deactivated[*]}
  fi
  if [ ${#configured_snowflake_bridges_activated[0]} = 0 ]; then
    number_configured_snowflake_bridges_activated=0
  else
    number_configured_snowflake_bridges_activated=${#configured_snowflake_bridges_activated[*]}
  fi
  number_configured_snowflake_bridges_total=$((number_configured_snowflake_bridges_deactivated+number_configured_snowflake_bridges_activated))
}

# list_all_obfs4_bridges()
# Used predefined variables: RED, NOCOLOR, YELLOW, GREEN
# Used predefined function: number_of_obfs4_bridges()
# List all OBFS4 bridges
list_all_obfs4_bridges()
{
  BRIDGE_DB_URL="https://onionoo.torproject.org"
  clear
  online_check $BRIDGE_DB_URL 0 1
  clear
  if [ $OCHECK == 1 ]; then
    echo -e "${YELLOW}[+] OK - we are connected with the bridge database${NOCOLOR}"
    sleep 2
  else
    echo -e "${YELLOW}[!] SORRY! - no connection with the bridge database${NOCOLOR}"
		echo -e "${RED}[!] We'll go ahead anyway.${NOCOLOR}"
    sleep 3
  fi
  number_of_obfs4_bridges
  if [ $number_configured_bridges_deactivated -gt 0 ]; then
    echo " "
    echo -e "${RED}[+] DEACTIVATED BRIDGES${NOCOLOR}"
    echo -e "${RED}[+] Format: <Number>: <IP>:<Port> <Fingerprint> <- STATUS>${NOCOLOR}"
    echo -e "${RED}[+] Would you like to have more information on a specific bridge?${NOCOLOR}"
    echo -e "${RED}[+] Go to https://metrics.torproject.org/rs.html and search for the fingerprint${NOCOLOR}"
    echo " "
    trap "bash menu-bridges; exit 0" SIGINT
    i=0
    while [ $i -lt $number_configured_bridges_deactivated ]
    do
        bridge_address=$(cut -d ' ' -f3,4 <<< ${configured_bridges_deactivated[$i]})
        if [ $OCHECK == 1 ]; then
          bridge_hash=$(cut -d ' ' -f2 <<< $bridge_address)
          if [ $CLEARNET_DECISION == 1 ]; then
            bridge_status=$($TORBOX_PATH/bin/bridges_check.py -f $bridge_hash)
          else
            bridge_status=$($TORBOX_PATH/bin/bridges_check.py --network=tor -f $bridge_hash)
          fi
          if [ $bridge_status == 1 ]; then bridge_status="${GREEN}- ONLINE${NOCOLOR}"
          elif [ $bridge_status == 0 ]; then bridge_status="${RED}- OFFLINE${NOCOLOR}"
          elif [ $bridge_status == 2 ]; then bridge_status="- DOESN'T EXIST"
          fi
        else bridge_status=" "
        fi
        i=$((i+1))
        bridge_address="$i : $bridge_address $bridge_status"
        echo -e $bridge_address
    done
  fi
  if [ $number_configured_bridges_activated -gt 0 ]; then
    echo " "
    echo -e "${RED}[+] ACTIVATED BRIDGES${NOCOLOR}"
    echo -e "${RED}[+] Format: <Number>: <IP>:<Port> <Fingerprint> <- STATUS>${NOCOLOR}"
    echo -e "${RED}[+] Would you like to have more information on a specific bridge?${NOCOLOR}"
    echo -e "${RED}[+] Go to https://metrics.torproject.org/rs.html and search for the fingerprint${NOCOLOR}"
    echo " "
    trap "bash menu-bridges; exit 0" SIGINT
    j=0
    while [ $j -lt $number_configured_bridges_activated ]
    do
        bridge_address=$(cut -d ' ' -f3,4 <<< ${configured_bridges_activated[$j]})
        if [ $OCHECK == 1 ]; then
          bridge_hash=$(cut -d ' ' -f2 <<< $bridge_address)
          if [ $CLEARNET_DECISION == 1 ]; then
            bridge_status=$($TORBOX_PATH/bin/bridges_check.py -f $bridge_hash)
          else
            bridge_status=$($TORBOX_PATH/bin/bridges_check.py --network=tor -f $bridge_hash)
          fi
          if [ $bridge_status == 1 ]; then bridge_status="${GREEN}- ONLINE${NOCOLOR}"
          elif [ $bridge_status == 0 ]; then bridge_status="${RED}- OFFLINE${NOCOLOR}"
          elif [ $bridge_status == 2 ]; then bridge_status="- DOESN'T EXIST" ; fi
        else bridge_status=" "
        fi
        j=$((j+1))
        n=$((i+j))
        bridge_address="${YELLOW}$n : $bridge_address${NOCOLOR} $bridge_status"
        echo -e "$bridge_address"
    done
  fi
  if [ "$number_configured_bridges_total" == "0" ]; then
    echo " "
    echo " "
    echo -e "${YELLOW}[!] SORRY! - there are no configured OBFS4 bridges!${NOCOLOR}"
  fi
  echo " "
  read -n 1 -s -r -p "Press any key to continue"
}

# list_all_snowflake_bridges()
# Used predefined variables: RED, NOCOLOR, YELLOW, GREEN
# Used predefined function: number_of_snowflake_bridges()
# List all Snowflake bridges
list_all_snowflake_bridges()
{
	clear
	# BRIDGE_DB_URL="https://onionoo.torproject.org"
  # online_check $BRIDGE_DB_URL 0 1
  # clear
	# IMORTANT: the support to show the ONLINE/OFFLINE status of Snowflake bridges is currently disabled because it is not reliable.
  # if [ $OCHECK == 1 ]; then
    # echo -e "${YELLOW}[+] OK - we are connected with the bridge database${NOCOLOR}"
    # sleep 2
  # else
    # echo -e "${YELLOW}[!] SORRY! - no connection with the bridge database${NOCOLOR}"
		# echo -e "${RED}[!] We'll go ahead anyway.${NOCOLOR}"
    # sleep 3
  # fi
	OCHECK=0
  number_of_snowflake_bridges
  if [ $number_configured_snowflake_bridges_deactivated -gt 0 ]; then
    echo -e "${RED}[+] DEACTIVATED BRIDGES${NOCOLOR}"
    echo -e "${RED}[+] Format: <number>: <IP>:<port> <fingerprint>${NOCOLOR}"
		echo -e "${RED}[+] For Snowflake bridges, the status is not available!${NOCOLOR}"
    echo -e "${RED}[+] Would you like to have more information on a specific bridge?${NOCOLOR}"
    echo -e "${RED}[+] Go to https://metrics.torproject.org/rs.html and search for the fingerprint${NOCOLOR}"
    echo " "
    trap "bash menu-bridges; exit 0" SIGINT
    i=0
    while [ $i -lt $number_configured_snowflake_bridges_deactivated ]
    do
      bridge_address=$(cut -d ' ' -f3- <<< ${configured_snowflake_bridges_deactivated[$i]})
      if [ $OCHECK == 1 ]; then
        bridge_hash=$(cut -d ' ' -f2 <<< $bridge_address)
        if [ $CLEARNET_DECISION == 1 ]; then
          bridge_status=$($TORBOX_PATH/bin/bridges_check.py -f $bridge_hash)
        else
          bridge_status=$($TORBOX_PATH/bin/bridges_check.py --network=tor -f $bridge_hash)
        fi
        if [ $bridge_status == 1 ]; then bridge_status="${GREEN}- ONLINE${NOCOLOR}"
        elif [ $bridge_status == 0 ]; then bridge_status="${RED}- OFFLINE${NOCOLOR}"
        elif [ $bridge_status == 2 ]; then bridge_status="- DOESN'T EXIST"
        fi
      else bridge_status=" "
      fi
      i=$((i+1))
			COUNTRY_LINE=""
			COUNTRY_LINE=$(grep -B 1 "$bridge_address" ${TORRC})
			COUNTRY_LINE=$(grep "^#Specific Snowflake bridge for " <<< "$COUNTRY_LINE")
			COUNTRY_LINE=$(sed "s/#Specific Snowflake bridge for //g" <<< "$COUNTRY_LINE")
			if [ -z $COUNTRY_LINE ]; then
				bridge_address="${RED}$i${NOCOLOR} : $bridge_address $bridge_status"
				echo -e "$bridge_address\n"
			else
				bridge_address="${RED}$i${NOCOLOR} : $bridge_address $bridge_status"
				echo -e "$bridge_address ${YELLOW}-> for_$COUNTRY_LINE${NOCOLOR}\n"
			fi
		done
		echo " "
  fi
  if [ $number_configured_snowflake_bridges_activated -gt 0 ]; then
    echo -e "${RED}[+] ACTIVATED BRIDGES${NOCOLOR}"
    echo -e "${RED}[+] Format: <number>: <IP>:<port> <fingerprint>${NOCOLOR}"
		echo -e "${RED}[+] For Snowflake bridges, the status is not available!${NOCOLOR}"
    echo -e "${RED}[+] Would you like to have more information on a specific bridge?${NOCOLOR}"
    echo -e "${RED}[+] Go to https://metrics.torproject.org/rs.html and search for the fingerprint${NOCOLOR}"
    echo " "
    trap "bash menu-bridges; exit 0" SIGINT
    j=0
    while [ $j -lt $number_configured_snowflake_bridges_activated ]
    do
      bridge_address=$(cut -d ' ' -f3,4 <<< ${configured_snowflake_bridges_activated[$j]})
      if [ $OCHECK == 1 ]; then
        bridge_hash=$(cut -d ' ' -f2 <<< $bridge_address)
        if [ $CLEARNET_DECISION == 1 ]; then
          bridge_status=$($TORBOX_PATH/bin/bridges_check.py -f $bridge_hash)
        else
          bridge_status=$($TORBOX_PATH/bin/bridges_check.py --network=tor -f $bridge_hash)
        fi
        if [ $bridge_status == 1 ]; then bridge_status="${GREEN}- ONLINE${NOCOLOR}"
        elif [ $bridge_status == 0 ]; then bridge_status="${RED}- OFFLINE${NOCOLOR}"
        elif [ $bridge_status == 2 ]; then bridge_status="- DOESN'T EXIST" ; fi
      else bridge_status=" "
      fi
      j=$((j+1))
      n=$((i+j))
			COUNTRY_LINE=""
			COUNTRY_LINE=$(grep -B 1 "$bridge_address" ${TORRC})
			COUNTRY_LINE=$(grep "^#Specific Snowflake bridge for " <<< "$COUNTRY_LINE")
			COUNTRY_LINE=$(sed "s/#Specific Snowflake bridge for //g" <<< "$COUNTRY_LINE")
			if [ -z $COUNTRY_LINE ]; then
				bridge_address="${YELLOW}$n${NOCOLOR} : $bridge_address $bridge_status"
				echo -e "$bridge_address\n"
			else
				bridge_address="${YELLOW}$n${NOCOLOR} : $bridge_address $bridge_status"
				echo -e "$bridge_address ${YELLOW}-> for_$COUNTRY_LINE${NOCOLOR}\n"
			fi
    done
  fi
  if [ "$number_configured_snowflake_bridges_total" == "0" ]; then
    echo " "
    echo " "
    echo -e "${YELLOW}[!] SORRY! - there are no configured Snowflake bridges!${NOCOLOR}"
  fi
  echo " "
  read -n 1 -s -r -p "Press any key to continue"
}

# deactivate_obfs4_bridges()
# Used predefined variables: TORRC
# Dectivates OBFS4 if the number of activated obfs4 bridge entries in torrc is 0
deactivate_obfs4_bridges()
{
	SOURCE_SCRIPT=$1
  sudo sed -i "s/^UseBridges/#UseBridges/g" ${TORRC}
  sudo sed -i "s/^UpdateBridgesFromAuthority/#UpdateBridgesFromAuthority/g" ${TORRC}
  sudo sed -i "s/^ClientTransportPlugin meek_lite,obfs4/#ClientTransportPlugin meek_lite,obfs4/g" ${TORRC}
  sudo sed -i "s/^Bridge obfs4 /#Bridge obfs4 /g" ${TORRC}
	INPUT=$(cat $TXT_DIR/restart-tor-text)
	if [ "$SOURCE_SCRIPT" != "NORESTART" ]; then
		if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO - DON'T (RE)START" --yes-button "YES - (RE)START" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
			restarting_tor $SOURCE_SCRIPT
		fi
	fi
}

# deactivate_snowflake_bridges()
# Used predefined variables: TORRC
# Dectivates Snowflake if the number of activated obfs4 bridge entries in torrc is 0
deactivate_snowflake_bridges()
{
	SOURCE_SCRIPT=$1
  sudo sed -i "s/^UseBridges/#UseBridges/g" ${TORRC}
  sudo sed -i "s/^UpdateBridgesFromAuthority/#UpdateBridgesFromAuthority/g" ${TORRC}
  sudo sed -i "s/^ClientTransportPlugin snowflake/#ClientTransportPlugin snowflake/g" ${TORRC}
  sudo sed -i "s/^Bridge snowflake /#Bridge snowflake /g" ${TORRC}
	INPUT=$(cat $TXT_DIR/restart-tor-text)
	if [ "$SOURCE_SCRIPT" != "NORESTART" ]; then
		if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO - DON'T (RE)START" --yes-button "YES - (RE)START" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
			restarting_tor $SOURCE_SCRIPT
		fi
	fi
}

# activate_obfs4_bridges(<source script>)
# Used predefined variables: TORRC
# Used predefined function: restarting_tor(), deactivate_obfs4_bridges()
# Activates OBFS4 if the number of activated obfs4 bridge entries in torrc is >0
activate_obfs4_bridges()
{
  SOURCE_SCRIPT=$1
  number_of_obfs4_bridges
  if [ $number_configured_bridges_activated -gt 0 ]; then
		if grep "^ReachableAddresses" ${TORRC} ; then
			INPUT=$(cat $TXT_DIR/no_antifirewall-please-text)
			if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
				sudo sed -i "s/^ReachableAddresses /#ReachableAddresses /g" ${TORRC}
			fi
		fi
		clear
    INPUT=$(cat $TXT_DIR/restart-tor-bridges-text)
    if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO - DON'T (RE)START" --yes-button "YES - (RE)START" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
			deactivating_bridge_relay
	    sudo sed -i "s/^#UseBridges/UseBridges/g" ${TORRC}
	    sudo sed -i "s/^#UpdateBridgesFromAuthority/UpdateBridgesFromAuthority/g" ${TORRC}
	    sudo sed -i "s/^#ClientTransportPlugin meek_lite,obfs4/ClientTransportPlugin meek_lite,obfs4/g" ${TORRC}
	    sudo sed -i "s/^ClientTransportPlugin snowflake /#ClientTransportPlugin snowflake /g" ${TORRC}
	    sudo sed -i "s/^Bridge snowflake /#Bridge snowflake /g" ${TORRC}
	    sudo sed -i "s/^Bridge meek_lite /#Bridge meek_lite /g" ${TORRC}
      restarting_tor $SOURCE_SCRIPT
    fi
  fi
}

# activate_obfs4_bridges(<source script>)
# Used predefined variables: TORRC
# Used predefined function: restarting_tor(), deactivate_snowflake_bridges()
# Activates Snowflake if the number of activated obfs4 bridge entries in torrc is >0
activate_snowflake_bridges()
{
  SOURCE_SCRIPT=$1
  number_of_snowflake_bridges
  if [ $number_configured_snowflake_bridges_activated -gt 0 ]; then
		if grep "^ReachableAddresses" ${TORRC} ; then
			INPUT=$(cat $TXT_DIR/no_antifirewall-please-text)
			if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
				sudo sed -i "s/^ReachableAddresses /#ReachableAddresses /g" ${TORRC}
			fi
		fi
		clear
    INPUT=$(cat $TXT_DIR/restart-tor-bridges-snowflake-text)
    if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO - DON'T (RE)START" --yes-button "YES - (RE)START" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
			deactivating_bridge_relay
	    sudo sed -i "s/^#UseBridges/UseBridges/g" ${TORRC}
	    sudo sed -i "s/^#UpdateBridgesFromAuthority/UpdateBridgesFromAuthority/g" ${TORRC}
	    sudo sed -i "s/^ClientTransportPlugin meek_lite,obfs4/#ClientTransportPlugin meek_lite,obfs4/g" ${TORRC}
	    sudo sed -i "s/^#ClientTransportPlugin snowflake /ClientTransportPlugin snowflake /g" ${TORRC}
	    sudo sed -i "s/^Bridge obfs4 /#Bridge obfs4 /g" ${TORRC}
	    sudo sed -i "s/^Bridge meek_lite /#Bridge meek_lite /g" ${TORRC}
      restarting_tor $SOURCE_SCRIPT
    fi
  fi
}

# display_net_reconfiguration_info())
# Used predefined variables: RED, NOCOLOR, YELLOW
# Displays information before reconfigure the network (only used several times in menu)
display_net_reconfiguration_info()
{
	if grep -q "^TORBOX_MINI=1" ${RUNFILE} ; then
		clear
		echo -e "${YELLOW}[!] IMPORTANT${NOCOLOR}"
		echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
		echo -e "${RED}[+] Usually, the configuration continuous afterward -- however,${NOCOLOR}"
		echo -e "${RED}    this can take up to ${YELLOW}two minutes.${NOCOLOR}"
		echo -e "${RED}[+] Was it not successful? You may have to choose the Internet${NOCOLOR}"
		echo -e "${RED}    source again.${NOCOLOR}"
		echo ""
	else
  	clear
  	echo -e "${YELLOW}[!] IMPORTANT${NOCOLOR}"
  	echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
  	echo -e "${RED}[+] Usually, the configuration continuous afterward -- however,${NOCOLOR}"
  	echo -e "${RED}    this can take up to ${YELLOW}two minutes.${NOCOLOR}"
  	echo -e "${RED}[+] If it doesn't, please DON'T CLOSE your ssh session, but${NOCOLOR}"
  	echo -e "${RED}    disconnect and reconnect your client device from the TorBox${NOCOLOR}"
  	echo -e "${RED}    until the client gets a valid IP address (192.168.42.* or${NOCOLOR}"
  	echo -e "${RED}    192.168.43.*). After waiting a little bit longer, you should${NOCOLOR}"
  	echo -e "${RED}    see TorBox's configuration dialogue in the SSH program again.${NOCOLOR}"
  	echo -e "${RED}[+] Was it not successful? You may have to choose the Internet${NOCOLOR}"
		echo -e "${RED}    source again.${NOCOLOR}"
		echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should load${NOCOLOR}"
		echo -e "${RED}    the desired configuration or the default values depending on${NOCOLOR}"
		echo -e "${RED}    the AP on wlan1 failsafe configuration in the Danger Room.${NOCOLOR}"
		echo -e "${RED}    Keep in mind that booting up could take more time.${NOCOLOR}"
  	echo ""
	fi
}

# find_virtport(<service_name>)
# Following variables can be used:
# $VIRTPORT -> Virtual port of an Onion Service
# $HIDDENSSERVICEPORT -> The entire HiddenServicePort configuration line of a specific Onion Service in torrc
# $UNIX_PATH -> The Unix socket path of a specidic Onion Service
# Finds the virtual port of a configured Onion Service
find_virtport()
{
  SERVICE_NAME="${1}"
  HIDDENSSERVICEPORT=""
  VIRTPORT=""
  UNIX_PATH="unix:/var/run/${SERVICE_NAME}-onion"
  HIDDENSSERVICEPORT=$(grep -m 1 "$UNIX_PATH" ${TORRC})
  #Bash specific, but should also work with other shells
  HIDDENSSERVICEPORT=${HIDDENSSERVICEPORT//#}
  VIRTPORT=$(cut -d ' ' -f2 <<< $HIDDENSSERVICEPORT)
}

# test_service_exists(<service_name>)
# Used predefined variables: YELLOW, NOCOLOR
# This function tests if a onion service exists.
# Following variables can be used:
# $ONION_HOSTNAME
test_service_exists()
{
  SERVICE_NAME="${1}"
	TOR_USER="debian-tor"
	DATA_DIR_ROOT="/var/lib"
	DATA_DIR="${DATA_DIR_ROOT}/tor"
	DATA_DIR_OS="${DATA_DIR}/services"
	ONION_HOSTNAME=""
  ONION_HOSTNAME=$(sudo -u "${TOR_USER}" grep -s ".onion" "${DATA_DIR_OS}/${SERVICE_NAME}/hostname")
  if [ "${ONION_HOSTNAME}" = "" ]; then
    clear
    echo -e "${YELLOW}[!] ERROR: Service does not exist: ${SERVICE_NAME}${NOCOLOR}"
    echo " "
    read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
    clear
		# NEW - TorBox v.0.5.4
		trap "bash menu-onion; exit 0" EXIT
    exit 1
  fi
}


# stopping_tfs(<tfs_name_list>)
# Used predefined variables: RED, YELLOW, NOCOLOR, RUNFILE
# Used predefined function: find_virtport(<service_name>)
# Stops certain TorBox Fils Sharing (TFS) instances
stopping_tfs()
{
	TFS_NAME_LIST=$1
	for TFS_NAME in $TFS_NAME_LIST; do
		echo -e "${RED}[+] Stopping TFS named ${YELLOW}${TFS_NAME}${RED} on Onion domain...${NOCOLOR}"
		PID=$(cat /home/torbox/torbox/lib/fileshare/pid/${TFS_NAME}.pid)
		(sudo kill $PID) &>/dev/null
		sudo sed -E -i "/^TFS-$TFS_NAME=lib\/fileshare\/tfs/d" "${RUNFILE}"
		echo -e "${RED}[+] Removing Nginx configuration...${NOCOLOR}"
		find_virtport "${TFS_NAME}"
		sudo rm "/etc/nginx/sites-enabled/${TFS_NAME}-${VIRTPORT}-onion-filesharing.conf"
		sudo rm "/etc/nginx/sites-available/${TFS_NAME}-${VIRTPORT}-onion-filesharing.conf"
	done
}

# stopping_tcs(<tcs_name_list>)
# Used predefined variables: RED, YELLOW, NOCOLOR, RUNFILE
# Used predefined function: find_virtport(<service_name>)
# Stops certain TorBox Chat Secure (TCS) instances
stopping_tcs()
{
	TCS_NAME_LIST=$1
	for TCS_NAME in $TCS_NAME_LIST; do
		echo -e "${RED}[+] Stopping TCS named ${YELLOW}${TCS_NAME}${RED} on Onion domain...${NOCOLOR}"
		PID=$(cat /home/torbox/torbox/lib/chatsecure/pid/${TCS_NAME}.pid)
		(sudo kill $PID) &>/dev/null
		sudo sed -E -i "/^TCS-$TCS_NAME=lib\/chatsecure\/tcs/d" "${RUNFILE}"
		# NEW - TorBox v.0.5.4
		sleep 2
		(sudo rm $PID_PATH/$SERVICE_NAME.pid) &>/dev/null
		(sudo rm $DB_PATH/$SERVICE_NAME.*) &>/dev/null
		(sudo rm /var/run/tcs_$SERVICE_NAME.sock) &>/dev/null
		#
		echo -e "${RED}[+] Removing Nginx configuration...${NOCOLOR}"
		find_virtport "${TCS_NAME}"
		sudo rm "/etc/nginx/sites-enabled/${TCS_NAME}-${VIRTPORT}-onion-chatsecure.conf"
		sudo rm "/etc/nginx/sites-available/${TCS_NAME}-${VIRTPORT}-onion-chatsecure.conf"
	done
}

# config_ipset(<filename> <ipset_name> <ipset-save-file>)
# Configures ipset
config_ipset()
{
	FILENAME=$1
	IPSET_NAME=$2
	IPSET_SAVE_FILE=$3
	if [ -f "$FILENAME" ]; then
		sudo ipset flush $IPSET_NAME;
		readarray -t LIST_FILE_OWN_ARRAY < "$FILENAME"
		for LIST_FILE_OWN_STRING in "${LIST_FILE_OWN_ARRAY[@]}"
		do
			SUBDOMAIN=$(cut -d ' ' -f1 <<< $LIST_FILE_OWN_STRING)
			LIST_FILE_OWN_STRING=$(sed "s/${SUBDOMAIN}//g" <<< $LIST_FILE_OWN_STRING)
			echo -e "${RED}[+] Excluding from tor routing: ${YELLOW}$SUBDOMAIN${NOCOLOR}"
			IFS=' ' read -ra IP_ARRAY <<< "$LIST_FILE_OWN_STRING"
			for IP in "${IP_ARRAY[@]}"; do sudo ipset -exist add $IPSET_NAME $IP; done
		done
		sudo ipset save $IPSET_NAME > $IPSET_SAVE_FILE
		sleep 1
	fi
}

# config_ipset(<filename> <ipset_name> <ipset-save-file>)
# Stops domain exclusion
stopping_domain_exclusion()
{
	# Where is the Internet
	INTERNET_IFACE=$(grep "^INTERNET_IFACE=" ${RUNFILE} | sed "s/.*=//g")
	tun0up=$(ip link | grep tun0)
	if [ ! -z "$tun0up" ]; then O_DEVICE="tun0"; else O_DEVICE=$INTERNET_IFACE; fi
	# Where are the clients
	CLIENT_IFACE=$(grep "^CLIENT_IFACE=" ${RUNFILE} | sed "s/CLIENT_IFACE=//g") 2>/dev/null
	NUMBER_OF_WORD=$(wc -w <<< "${CLIENT_IFACE}")
	if [ "$NUMBER_OF_WORD" == "1" ]; then
		I_DEVICE1=$CLIENT_IFACE
		if [ "$INTERNET_IFACE" == "eth0" ]; then I_DEVICE2="eth1"; else I_DEVICE2="eth0"; fi
		if grep -q "^TORBOX_MINI=0" ${RUNFILE} ; then
			I_DEVICE3="usb0"
		else
			I_DEVICE3="tun1"
		fi
	elif [ "$NUMBER_OF_WORD" == "2" ]; then
		I_DEVICE1=$(cut -d ' ' -f1 <<< $CLIENT_IFACE)
		I_DEVICE2=$(cut -d ' ' -f1 <<< $CLIENT_IFACE)
		if grep -q "^TORBOX_MINI=0" ${RUNFILE} ; then
			I_DEVICE3="usb0"
		else
			I_DEVICE3="tun1"
		fi
	else
		I_DEVICE1=$(cut -d ' ' -f1 <<< $CLIENT_IFACE)
		I_DEVICE2=$(cut -d ' ' -f1 <<< $CLIENT_IFACE)
		I_DEVICE3=$(cut -d ' ' -f1 <<< $CLIENT_IFACE)
	fi
	clear
	(sed -i "s/^UNPROTECTED_DOMAIN=.*/UNPROTECTED_DOMAIN=0/" ${RUNFILE}) 2>/dev/null
	sudo bash bin/set_interfaces_2 $INTERNET_IFACE $I_DEVICE1 $I_DEVICE2 $I_DEVICE3 0 1
	sudo ipset destroy 2>/dev/null
}
