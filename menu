#!/bin/bash

# This file is a part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2024 Patrick Truffer
# Contact: anonym@torbox.ch
# Website: https://www.torbox.ch
# Github:  https://github.com/radio24/TorBox
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file displays the main menu and executes all relevant scripts.
#
# SYNTAX
# ./menu [<INTERNETSELECTION>]
#
# <INTERNETSELECTION> will execute one of the routines, which configures
# TorBox to route the data from an internal to an external interface.
#
###### SET VARIABLES ######
#
# SIZE OF THE MENU
#
# How many items do you have in the main menu?
NO_ITEMS=15
#
# How many lines are only for decoration and spaces?
NO_SPACER=3
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_15=15
# MENU_HEIGHT should not exceed 26
MENU_HEIGHT=$((8+NO_ITEMS+NO_SPACER))
MENU_LIST_HEIGHT=$((NO_ITEMS+NO_SPACER))

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

# Identify the Operation System
CHECK_OS="$(lsb_release -si)"
CHECK_OS="$(echo "$CHECK_OS" | tail -n1)"

#Other variables
TORSTATS="sudo -u debian-tor nyx"
TORRC="/etc/tor/torrc"
RUNFILE="/home/torbox/torbox/run/torbox.run"
EXITID="EXITID=0"
MMENUSTRING=""
INTERNETSELECTION=$1

#Check freshinstalled
FRESHINSTALLED=$(grep "^FRESH_INSTALLED=.*" ${RUNFILE} | sed "s/.*=//g") 2>/dev/null

##############################
######## FUNCTIONS ###########

#include lib
.  /home/torbox/torbox/lib/torbox.lib

# TIS FUNCTION HAS TO BE INTEGRATED INTO THE LIB
# This function imports the configuration and makes some preparations
# TOGGLE07 / TOGGLE08 represents the status of the Bridge Relay mode
read_config()
{
  MODE_BR=$(grep "^BridgeRelay" ${TORRC})
  if [ "$MODE_BR" = "BridgeRelay 1" ]; then
    TOGGLE07="IS RUNNING"
  else
    TOGGLE07="IS NOT RUNNING"
  fi
  MODE_OS=$(grep "^HiddenServiceDir" ${TORRC})
  if [ ! -z "$MODE_OS" ]; then
    TOGGLE16="IS RUNNING"
  else
    TOGGLE16="IS NOT RUNNING"
  fi
}

# This function opens the ports, after a restart if bridge relay is on
check_bridge_relay()
{
	if grep "^BridgeRelay 1" ${TORRC} ; then
  	ORPORT=$(grep "^ORPort" ${TORRC} | cut -d " " -f2)
  	OBFS4PORT=$(grep "^ServerTransportListenAddr" ${TORRC} | cut -d ":" -f2)
  	(sudo iptables -C INPUT -p tcp --dport $ORPORT -j ACCEPT) 2>/dev/null
  	RULE_CHECK=$?
  	if [ $RULE_CHECK = 1 ]; then
    	(sudo iptables -A INPUT -p tcp --dport $ORPORT -j ACCEPT) 2>/dev/null
    	(sudo iptables -A INPUT -p tcp --dport $OBFS4PORT -j ACCEPT) 2>/dev/null
  	fi
	else
		if iptables-save | grep -e "-A INPUT -p tcp --dport $ORPORT -j ACCEPT" ; then (sudo /sbin/iptables -D INPUT -p tcp --dport $ORPORT -j ACCEPT) 2>/dev/null ; fi
		if iptables-save | grep -e "-A INPUT -p tcp --dport $OBFS4PORT -j ACCEPT" ; then (sudo /sbin/iptables -D INPUT -p tcp --dport $OBFS4PORT -j ACCEPT) 2>/dev/null ; fi
	fi
}

# This function tests if TorBox's automatic counteractions are activated and still running
check_log_check()
{
	clear
	if pgrep -f "log_check.py"; then
  	clear
	else
  	clear
  	if grep "LOGCHECK=1" /home/torbox/torbox/run/torbox.run ; then
    	clear
    	(nohup sudo /usr/bin/python3 /home/torbox/torbox/log_check.py &) 2>/dev/null
			clear
    	sleep 1
  	fi
	fi
}

# This function asks if a Captive Portal is used and which method should be taken to pass through it
ask_captive()
{
	clear
	INPUT=$(cat text/captive_or_not-text)
	if (whiptail --title "TorBox - INFO" --defaultno --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
		INPUT=$(cat text/captive_portal-text)
		if (whiptail --title "TorBox - INFO" --no-button "TUNNELLING" --yes-button "SPOOFING" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
			CAPTIVE=2
		else
			CAPTIVE=1
		fi
	else
		CAPTIVE=0
	fi
	sleep 2
}

######## PREPARATIONS ########
# Resetting
shopt -s checkwinsize
[ -f nohup.out ] && sudo rm nohup.out
stty intr ^c
trap

# Resetting run-file (the initial EXITID in the runfile has to be 0)
sudo sed -i "s/^EXITID=.*/${EXITID}/" ${RUNFILE}
clear
if [ -z "$INTERNETSELECTION" ]; then
  if [ $FRESHINSTALLED -gt 0 ]; then bin/first_use; fi
fi
read_config
do_we_use_bridges
check_bridge_relay
check_interface_with_internet
check_log_check
check_tor
TOR_OVER_VPN=$(sudo iptables -t nat -vnL | grep tun0)

if [ ! -z "$TOR_STATUS" ] && [ ! -z "$VPN_STATUS" ] && [ ! -z "$TOR_OVER_VPN" ]; then TOR_STATUS="   TOR over VPN working"
elif [ ! -z "$TOR_STATUS" ] && [ ! -z "$VPN_STATUS" ] && [ -z "$TOR_OVER_VPN" ]; then TOR_STATUS="VPN is up & TOR working"
elif [ ! -z "$TOR_STATUS" ] && [ -z "$VPN_STATUS" ] && [ -z "$TOR_OVER_VPN" ]; then TOR_STATUS="         TOR is working"
elif [ -z "$TOR_STATUS" ] && [ ! -z "$VPN_STATUS" ] && [ -z "$TOR_OVER_VPN" ]; then TOR_STATUS="              VPN is up"
else TOR_STATUS=""
fi

if grep ^FORWARDING_ONLY=1 ${RUNFILE}; then TOR_STATUS="   FORWARDING - NO TOR!"; fi

if grep "^TOR_CONTROL_PORT_ACCESS=1" ${RUNFILE}; then
  CONTROLPORT_WLAN="s/^#ControlPort 192.168.42.1:9051/ControlPort 192.168.42.1:9051/"
  CONTROLPORT_ETH="s/^#ControlPort 192.168.43.1:9051/ControlPort 192.168.43.1:9051/"
else
  CONTROLPORT_WLAN="s/^ControlPort 192.168.42.1:9051/#ControlPort 192.168.42.1:9051/"
  CONTROLPORT_ETH="s/^ControlPort 192.168.43.1:9051/#ControlPort 192.168.43.1:9051/"
fi
CHOICE=""

#If first_use is at play, only the configuration where the Internet is coming from will be made without displaying the Main Menu
if [[ $INTERNETSELECTION -gt 4 && $INTERNETSELECTION -lt 11 ]]; then
  CHOICE=$INTERNETSELECTION
else
	#Probabaly only under Ubuntu shell output line separator fails to get reset: https://superuser.com/questions/1650758/how-does-the-shell-output-line-separator-fail-to-get-reset
	if [ "$CHECK_OS" == "Ubuntu" ]; then stty sane; fi
  ###### DISPLAY THE MAIN MENU ######
  CHOICE=$(whiptail --nocancel --title "TorBox v.0.5.3 - MAIN MENU" --menu "Choose an option (ESC -> command prompt)            $TOR_STATUS" $MENU_HEIGHT $MENU_WIDTH $MENU_LIST_HEIGHT \
  " 1" "Tor statistics (press m for menu / q to quit)" \
  " 2" "Enforce a new exit node with a new IP" \
  " 3" "Restart Tor - check if it is working (press q to quit)"  \
  " 4" "Display the Tor log file - quick and dirty (press q to quit)" \
  "===" "===================================[Where is the Internet?]===" \
  " 5" "Ethernet cable (eth0)                                      "$FLASH_ETH0 \
  " 6" "Wireless network (through an USB adapter; wlan1)           "$FLASH_WLAN1 \
  " 7" "Wireless network (through the onboard chip; wlan0)         "$FLASH_WLAN0 \
  " 8" "Cellular, USB dongle or Tethering (Android) (ppp0; usb0)   "$FLASH_USB0 \
  " 9" "USB ethernet adapter or Tethering (iOS) (eth1)             "$FLASH_ETH1 \
  "10" "Over a VPN connection (tun0)                               "$FLASH_TUN0 \
  "===" "===============================================[Sub-Menus]===" \
  "11" "Go to the Countermeasure sub-menu...          ${MMENUSTRING}" \
  "12" "Go to the Configuration sub-menu..." \
	"13" "Go to run an OBFS4 Bridge Relay...            ${TOGGLE07}" \
	"14" "Go to run an Onion Service...                 ${TOGGLE16}" \
	"15" "Go to the Danger Zone..." \
  "16" "Go to the Update and Maintenance sub-menu..." \
	"==" "============================================[Informational]===" \
	"17" "HOW CAN I SUPPORT THE TOR PROJECT!" \
	"18" "HOW CAN I HELP WITH TORBOX?" \
  "===" "========================================[Reboot & Shutdown]===" \
  "19" "Reboot / Shutdown TorBox" \
  3>&1 1>&2 2>&3)
	exitstatus=$?
	# exitstatus == 255 means that the ESC key was pressed
	[ "$exitstatus" == "255" ] && exit 0
fi

CHOICE=$(echo "$CHOICE" | tr -d ' ')
case "$CHOICE" in

  # This starts nyx (Tor statistics)
  1)
    clear
    $TORSTATS
  ;;

  # This enforces a new exit node
  2)
    clear
    echo -e "${RED}[+] Requesting new identity...${WHITE}"
    echo ""
    sleep 2
    sudo -u debian-tor tor-prompt --run 'SIGNAL NEWNYM'
    echo -e "${RED}[+] Done!${NOCOLOR}"
    sleep 4
  ;;

  # Restart Tor and check the progress
  3)
    INPUT=$(cat text/restart-tor-text)
    if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO - DON'T (RE)START" --yes-button "YES - (RE)START" --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
      clear
      restarting_tor menu
			exit 0
    fi
  ;;

  # This displays the tor log file (quick and dirty)
  4)
    clear
    trap "bash menu; exit 0" SIGINT
    echo -e "${RED}[+] See below the tor log file (press q to quit):${NOCOLOR}"
		stty intr q
    sudo tail -f -n 30 /var/log/tor/notices.log | sed -u 's#.*Bootstrapped 100% (done): Done#\x1b[97m&\x1b[0m#' | grep -v -e "You configured a non-loopback address" -e "opening log file" -e "Application request when we haven't" -e "Giving up. (waiting for circuit)" -e "New control connection opened from" -e "While fetching directory info, no running dirservers known"
		stty intr ^c
  ;;

  # Ethernet cable internet eth0 --> wlan0 / eth1
  5)
    INPUT=$(cat text/cable-text)
    if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      display_net_reconfiguration_info
			(nohup bin/hostapd_fallback_komplex_part_1 wlan0 eth1) 2>/dev/null
			echo -e "${WHITE}[+] Step 1 of 2 done${NOCOLOR}"
			(nohup bin/hostapd_fallback_komplex_part_2 wlan0 eth1) 2>/dev/null
			echo -e "${WHITE}[+] Step 2 of 2 done${NOCOLOR}"
			sleep 2
			ask_captive
      if ip link | grep wlan0 | grep "state UP" ; then
        WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
        clear
      fi
      if ip link | grep eth1 | grep "state UP" ; then
        ETH1_IP=$(ip addr show eth1 | grep -w 192.168.43.1)
        clear
      fi
      if [ -n "$WLAN0_IP" ] && [ -n "$ETH1_IP" ] ; then
        sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
        sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
        sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
        sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
        sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
        sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
        sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=eth0/" ${RUNFILE}
        sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0 eth1/" ${RUNFILE}
      elif [ -z "$WLAN0_IP" ] && [ -n "$ETH1_IP" ] ; then
        sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
        sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
        sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
        sudo sed -i "s/^SocksPort 192.168.42.1:9052/#SocksPort 192.168.42.1:9052/" ${TORRC}
        sudo sed -i "s/^ControlPort 192.168.42.1:9051/#ControlPort 192.168.42.1:9051/" ${TORRC}
        sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
        sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
        sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
        sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=eth0/" ${RUNFILE}
        sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=eth1/" ${RUNFILE}
      else
        sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
        sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
        sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
        sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
        sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
        sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
        sudo sed -i "s/^SocksPort 192.168.43.1:9052/#SocksPort 192.168.43.1:9052/" ${TORRC}
        sudo sed -i "s/^ControlPort 192.168.43.1:9051/#ControlPort 192.168.43.1:9051/" ${TORRC}
        sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=eth0/" ${RUNFILE}
        sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0/" ${RUNFILE}
      fi
      # The following line should minimize those cases where a restart is required.
      sudo systemctl restart isc-dhcp-server
      if [ -z "$INTERNETSELECTION" ]; then
        sudo bash bin/set_interfaces_2 eth0 wlan0 eth1 $CAPTIVE 1
      else
        sudo bash bin/set_interfaces_2 eth0 wlan0 eth1 $CAPTIVE 0
      fi
      if [ -z "$INTERNETSELECTION" ]; then finish; else exit; fi
      (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2>/dev/null
    fi
  ;;

  # Wireless network (through an USB adapter; wlan1 --> wlan0 / eth0)
  6)
    INPUT=$(cat text/wlan1-text)
    if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      if ip link | grep wlan1; then
        display_net_reconfiguration_info
        (nohup bin/hostapd_fallback_komplex_part_1 wlan0 eth0) 2>/dev/null
				echo -e "${WHITE}[+] Step 1 of 2 done${NOCOLOR}"
				(nohup bin/hostapd_fallback_komplex_part_2 wlan0 eth0) 2>/dev/null
				echo -e "${WHITE}[+] Step 2 of 2 done${NOCOLOR}"
				sleep 2
        ask_captive
        if ip link | grep wlan0 | grep "state UP" ; then
          WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
          clear
        fi
        if ip link | grep eth0 | grep "state UP" ; then
          ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
          clear
        fi
        if [ -n "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=wlan1/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0 eth0/" ${RUNFILE}
        elif [ -z "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
          sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9052/#SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "s/^ControlPort 192.168.42.1:9051/#ControlPort 192.168.42.1:9051/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=wlan1/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=eth0/" ${RUNFILE}
        else
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
          sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9052/#SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "s/^ControlPort 192.168.43.1:9051/#ControlPort 192.168.43.1:9051/" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=wlan1/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0/" ${RUNFILE}
        fi
        # The following line should minimize those cases where a restart is required.
        sudo systemctl restart isc-dhcp-server
        if [ -z "$INTERNETSELECTION" ]; then
          sudo bash bin/set_interfaces_2 wlan1 wlan0 eth0 $CAPTIVE 1
        else
          sudo bash bin/set_interfaces_2 wlan1 wlan0 eth0 $CAPTIVE 0
        fi
        if [ -z "$INTERNETSELECTION" ]; then finish; else exit; fi
        (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2>/dev/null
      else
        whiptail --title "TorBox - INFO" --textbox text/no_wlan1-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
      fi
    fi
  ;;

  # Wireless network (through the onboard chip; wlan0 --> wlan1 / eth0)
  # This menu entry temporary restores the wlan1 / eth0 configuration, which does not survive a reboot!
  # A failsave routine in rc.local takes care of it!
  7)
    INPUT=$(cat text/wlan0-text)
    if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      display_net_reconfiguration_info
			(nohup bin/hostapd_fallback_komplex_part_1 wlan1 eth0) 2>/dev/null
			echo -e "${WHITE}[+] Step 1 of 2 done${NOCOLOR}"
			(nohup bin/hostapd_fallback_komplex_part_2 wlan1 eth0) 2>/dev/null
			echo -e "${WHITE}[+] Step 2 of 2 done${NOCOLOR}"
			sleep 2
			ask_captive
      if ip link | grep wlan1 | grep "state UP" ; then
        WLAN1_IP=$(ip addr show wlan1 | grep -w 192.168.42.1)
        clear
      fi
      if ip link | grep eth0 | grep "state UP" ; then
        ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
        clear
      fi
      if [ -n "$WLAN1_IP" ] && [ -n "$ETH0_IP" ] ; then
        sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
        sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
        sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
        sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
        sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
        sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
        sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=wlan0/" ${RUNFILE}
        sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan1 eth0/" ${RUNFILE}
      elif [ -z "$WLAN1_IP" ] && [ -n "$ETH0_IP" ] ; then
        sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
        sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
        sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
        sudo sed -i "s/^SocksPort 192.168.42.1:9052/#SocksPort 192.168.42.1:9052/" ${TORRC}
        sudo sed -i "s/^ControlPort 192.168.42.1:9051/#ControlPort 192.168.42.1:9051/" ${TORRC}
        sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
        sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
        sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
        sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=wlan0/" ${RUNFILE}
        sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=eth0/" ${RUNFILE}
      else
        sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
        sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
        sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
        sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
        sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
        sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
        sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
        sudo sed -i "s/^SocksPort 192.168.43.1:9052/#SocksPort 192.168.43.1:9052/" ${TORRC}
        sudo sed -i "s/^ControlPort 192.168.43.1:9051/#ControlPort 192.168.43.1:9051/" ${TORRC}
        sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=wlan0/" ${RUNFILE}
        sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan1/" ${RUNFILE}
      fi
      # The following line should minimize those cases where a restart is required.
      sudo systemctl restart isc-dhcp-server
      if [ -z "$INTERNETSELECTION" ]; then
        sudo bash bin/set_interfaces_2 wlan0 wlan1 eth0 $CAPTIVE 1
      else
        sudo bash bin/set_interfaces_2 wlan0 wlan1 eth0 $CAPTIVE 0
      fi
      if [ -z "$INTERNETSELECTION" ]; then finish; else exit; fi
      # iptables cannot be saved !!
    fi
  ;;

  # Cellular or other connections (ppp0; usb0 --> wlan0 / eth0)
  8)
    INPUT=$(cat text/ppp0-text)
    if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      display_net_reconfiguration_info
			(nohup bin/hostapd_fallback_komplex_part_1 wlan0 eth0) 2>/dev/null
			echo -e "${WHITE}[+] Step 1 of 2 done${NOCOLOR}"
			(nohup bin/hostapd_fallback_komplex_part_2 wlan0 eth0) 2>/dev/null
			echo -e "${WHITE}[+] Step 2 of 2 done${NOCOLOR}"
			sleep 2
			ask_captive
      if ip link | grep usb0 ; then
        if ip link | grep wlan0 | grep "state UP" ; then
          WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
          clear
        fi
        if ip link | grep eth0 | grep "state UP" ; then
          ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
          clear
        fi
        if [ -n "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=usb0/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0 eth0/" ${RUNFILE}
        elif [ -z "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
          sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9052/#SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "s/^ControlPort 192.168.42.1:9051/#ControlPort 192.168.42.1:9051/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=usb0/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=eth0/" ${RUNFILE}
        else
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
          sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9052/#SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "s/^ControlPort 192.168.43.1:9051/#ControlPort 192.168.43.1:9051/" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=usb0/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0/" ${RUNFILE}
        fi
        # The following line should minimize those cases where a restart is required.
        sudo systemctl restart isc-dhcp-server
        if [ -z "$INTERNETSELECTION" ]; then
          sudo bash bin/set_interfaces_2 usb0 wlan0 eth0 $CAPTIVE 1
        else
          sudo bash bin/set_interfaces_2 usb0 wlan0 eth0 $CAPTIVE 0
        fi
        if [ -z "$INTERNETSELECTION" ]; then finish; else exit; fi
        (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2>/dev/null
      else
        if pgrep -f "pppd"; then
          if (whiptail --title "TorBox - INFO" --no-button "CONTINUE" --yes-button "RESET" --yesno "\nThe PPP connection is already up!\n\nDo you want to reset the PPP connection or continue with the already existing one?" $MENU_HEIGHT_15 $MENU_WIDTH); then
						clear
						echo -e "${RED}[+] Reset PPP connection (you may check the output for errors)${NOCOLOR}"
						echo -e "${RED}[+] If stuck, please press q${NOCOLOR}"
						echo ""
						trap "bash menu; exit 0" SIGINT
						stty intr q
						sudo bin/poff
						sleep 5
						sudo pon
						echo ""
						sleep 2
						read -n 1 -s -r -p "Press any key to continue"
						stty intr ^c
						trap
					fi
        else
        	echo -e "${RED}[+] Activating PPP connection (you may check the output for errors)${NOCOLOR}"
        	echo -e "${RED}[+] If stuck, please press q${NOCOLOR}"
        	echo ""
					trap "bash menu; exit 0" SIGINT
					stty intr q
					if pgrep -f "pppd"; then
						sudo bin/poff
						sleep 5
					fi
        	sudo pon
        	echo ""
        	sleep 2
        	read -n 1 -s -r -p "Press any key to continue"
					stty intr ^c
					trap
				fi
        if ip link | grep ppp0 > /dev/null; then
          if ip link | grep wlan0 | grep "state UP" ; then
            WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
            clear
          fi
          if ip link | grep eth0 | grep "state UP" ; then
            ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
            clear
          fi
          if [ -n "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
            sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
            sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
            sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=ppp0/" ${RUNFILE}
            sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0 eth0/" ${RUNFILE}
          elif [ -z "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
            sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.42.1:9052/#SocksPort 192.168.42.1:9052/" ${TORRC}
            sudo sed -i "s/^ControlPort 192.168.42.1:9051/#ControlPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
            sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
            sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=ppp0/" ${RUNFILE}
            sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=eth0/" ${RUNFILE}
          else
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
            sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
            sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9052/#SocksPort 192.168.43.1:9052/" ${TORRC}
            sudo sed -i "s/^ControlPort 192.168.43.1:9051/#ControlPort 192.168.43.1:9051/" ${TORRC}
            sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=ppp0/" ${RUNFILE}
            sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0/" ${RUNFILE}
          fi
          # The following line should minimize those cases where a restart is required.
          sudo systemctl restart isc-dhcp-server
          if [ -z "$INTERNETSELECTION" ]; then
            sudo bash bin/set_interfaces_2 ppp0 wlan0 eth0 $CAPTIVE 1
          else
            sudo bash bin/set_interfaces_2 ppp0 wlan0 eth0 $CAPTIVE 0
          fi
          if [ -z "$INTERNETSELECTION" ]; then finish; else exit; fi
          (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2>/dev/null
        else
          whiptail --title "TorBox - INFO" --textbox text/no_ppp0-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
        fi
      fi
    fi
  ;;

  # Tethering or USB ethernet adapter (eth1 --> wlan0 / eth0)
  9)
    INPUT=$(cat text/tethering-text)
    if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      if ip link | grep eth1 ; then
        display_net_reconfiguration_info
				(nohup bin/hostapd_fallback_komplex_part_1 wlan0 eth0) 2>/dev/null
				echo -e "${WHITE}[+] Step 1 of 2 done${NOCOLOR}"
				(nohup bin/hostapd_fallback_komplex_part_2 wlan0 eth0) 2>/dev/null
				echo -e "${WHITE}[+] Step 2 of 2 done${NOCOLOR}"
				sleep 2
				ask_captive
        if ip link | grep wlan0 | grep "state UP" ; then
          WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
          clear
        fi
        if ip link | grep eth0 | grep "state UP" ; then
          ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
          clear
        fi
        if [ -n "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=eth1/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0 eth0/" ${RUNFILE}
        elif [ -z "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
          sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9052/#SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "s/^ControlPort 192.168.42.1:9051/#ControlPort 192.168.42.1:9051/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=eth1/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=eth0/" ${RUNFILE}
        else
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
          sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "s/^ControlPort 192.168.43.1:9051/#ControlPort 192.168.43.1:9051/" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=eth1/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0/" ${RUNFILE}
        fi
        # The following line should minimize those cases where a restart is required.
        sudo systemctl restart isc-dhcp-server
        if [ -z "$INTERNETSELECTION" ]; then
          sudo bash bin/set_interfaces_2 eth1 wlan0 eth0 $CAPTIVE 1
        else
          sudo bash bin/set_interfaces_2 eth1 wlan0 eth0 $CAPTIVE 0
        fi
        if [ -z "$INTERNETSELECTION" ]; then finish; else exit; fi
        (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2>/dev/null
      else
        whiptail --title "TorBox - INFO" --textbox text/no_eth1-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
      fi
    fi
  ;;

  # Over a VPN connection (tun0)
  10)
    INPUT=$(cat text/tun0-text)
    if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
			tun0up=$(ip link | grep tun0)
			if [ -z "$tun0up" ] ; then
        clear
				online_check default 0 0
				if [ $OCHECK == 0 ]; then
					INPUT=$(cat text/tun0-not_connected-text)
					if (whiptail --title "TorBox - INFO" --yesno --no-button "CONTINUE" --yes-button "CONNECT WLAN" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
						display_net_reconfiguration_info
						(nohup bin/hostapd_fallback_komplex_part_1 wlan0 eth0) 2>/dev/null
						echo -e "${WHITE}[+] Step 1 of 2 done${NOCOLOR}"
						(nohup bin/hostapd_fallback_komplex_part_2 wlan0 eth0) 2>/dev/null
						echo -e "${WHITE}[+] Step 2 of 2 done${NOCOLOR}"
						sleep 2
						ask_captive
						# set_interfaces_2 will do the captive portal handling, if necessary and start TWM, but it will not restart tor
						sudo bash bin/set_interfaces_2 wlan1 wlan0 eth0 $CAPTIVE 0 0
			  	fi
				fi
				connecting_to_VPN
				sleep 3
			fi
			tun0up=$(ip link | grep tun0)
      if [ ! -z "$tun0up" ] ; then
        if ip link | grep wlan0 | grep "state UP" ; then
          WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
          clear
        fi
        if ip link | grep eth0 | grep "state UP" ; then
          ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
          clear
        fi
        if [ -n "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=tun0/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0 eth0/" ${RUNFILE}
        elif [ -z "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
          sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9052/#SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "s/^ControlPort 192.168.42.1:9051/#ControlPort 192.168.42.1:9051/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9052/SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_ETH" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=tun0/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=eth0/" ${RUNFILE}
        else
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9052/SocksPort 192.168.42.1:9052/" ${TORRC}
          sudo sed -i "$CONTROLPORT_WLAN" ${TORRC}
          sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9052/#SocksPort 192.168.43.1:9052/" ${TORRC}
          sudo sed -i "s/^ControlPort 192.168.43.1:9051/#ControlPort 192.168.43.1:9051/" ${TORRC}
          sudo sed -i "s/^INTERNET_IFACE=.*/INTERNET_IFACE=tun0/" ${RUNFILE}
          sudo sed -i "s/^CLIENT_IFACE=.*/CLIENT_IFACE=wlan0/" ${RUNFILE}
        fi
        # The following line should minimize those cases where a restart is required.
        sudo systemctl restart isc-dhcp-server
        if [ -z "$INTERNETSELECTION" ]; then
          sudo bash bin/set_interfaces_2 tun0 wlan0 eth0 0 1 1
        else
          sudo bash bin/set_interfaces_2 tun0 wlan0 eth0 0 0 1
        fi
        if [ -z "$INTERNETSELECTION" ]; then finish; else exit; fi
        (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2>/dev/null
      else
        whiptail --title "TorBox - INFO" --textbox text/no_tun0-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
      fi
    fi
  ;;

  # Sub-menues
  11) bash menu-bridges;;
  12) bash menu-config;;
	13) bash menu-server;;
	14) bash menu-onion;;
	15)
		INPUT=$(cat text/menu_danger-text)
		whiptail --title "TorBox - INFO" --msgbox "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH
		bash menu-danger
	;;
  16)
    screen bash menu-update
    clear
    # shellcheck disable=SC2164
    cd
    # shellcheck disable=SC2164
    cd torbox
  ;;

	# How to support Tor
	17)
		INPUT=$(cat text/support-tor-text)
		whiptail --title "TorBox - INFO" --msgbox "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH
	;;

	# How to support TorBox
	18)
		INPUT=$(cat text/support-torbox-text)
		whiptail --title "TorBox - INFO" --msgbox "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH
	;;

  # Reboot or Shotdown TorBox
  19)
    CHOICE_EXIT=$(whiptail --nocancel --title "TorBox v.0.5.3 - EXIT MENU" --menu "Reboot or Shutdown (ESC to quit)" 10 $MENU_WIDTH_REDUX 2 \
    "  1" "REBOOT   TorBox" \
    "  2" "SHUTDOWN TorBox" \
    3>&1 1>&2 2>&3)
    if [ "$CHOICE_EXIT" != " " ]; then
      if [ $CHOICE_EXIT = 1 ]; then
        clear
        echo -e "${RED}[+] Rebooting TorBox...${NOCOLOR}"
        echo -e "${WHITE}[!] If you have activated Bridges or Bridge Relay, these services will be reactivated automatically after the restart.${NOCOLOR}"
        echo ""
        sleep 2
        sudo reboot
        exit 0
      elif [ $CHOICE_EXIT = 2 ]; then
        clear
        echo -e "${RED}[+] Shutting down TorBox...${NOCOLOR}"
        echo -e "${WHITE}[!] If you have activated Bridges or Bridge Relay, these services will be reactivated automatically after the restart.${NOCOLOR}"
        echo -e "${WHITE}[!] You can disconnect TorBox from the power source in about 30 second...${NOCOLOR}"
        echo ""
        sleep 2
        sudo shutdown -h now
        exit 0
      fi
    fi
  ;;

  *)
    clear
		#Probabaly only under Ubuntu shell output line separator fails to get reset: https://superuser.com/questions/1650758/how-does-the-shell-output-line-separator-fail-to-get-reset
		if [ "$CHECK_OS" == "Ubuntu" ]; then stty sane; fi
    PROMPTTEXT=$(cat text/prompt-text)
    echo -e "$PROMPTTEXT"
    echo " "
    exit 0
esac
bash menu
