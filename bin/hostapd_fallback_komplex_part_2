#!/bin/bash

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2024 radio24
# Contact: anonym@torbox.ch
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file tries to fix all network-related problems, like wrong assigned IP
# addresses, issues with dhclient, hostapd, and others. It also restarts
# TorBox's wireless network (AP, hostapd) if we use a WLAN adapter as an AP,
# checks if the daemon is working, and, if not, resets the configuration with
# the last working version and restarts the daemon again. If nothing works,
# the configuration is set that way that after a restart, TorBox's wireless
# network can be found on wlan0.
#
# SYNTAX
# nohup ./hostapd_fallback_komplex_part_2 <interface 1> <interface 2>
#
# <interface 1>: Is the interface with the AP: wlan0 or wlan1.
# <interface 2>: Is the interface with the connected cable client: eth0 or eth1
#
# IMPORTANT
# There is no failsave configuration in this procedure, because it interfered
# with the rest. The failsave is part of the rc.local script. It will check for
# wlan1 entries in the configuration fails and substitutet them with wlan0.
#
#
##### SET VARIABLES ######

#Other variables
INTERFACE1=$1
INTERFACE2=$2

# INTERFACE1 and INTERFACE2 are clients - INTERFACE3 and INTERFACE4 are potential Internet sources
if [ "$INTERFACE1" == "wlan1" ] ; then
	INTERFACE3="wlan0"
else
	INTERFACE3="wlan1"
fi

if [ "$INTERFACE2" == "eth1" ] ; then
	INTERFACE4="eth0"
else
	INTERFACE4="eth1"
fi

# Is INTERFACE3 ready?
# Because it is a possible Internet source, the Interface should be up, but
# the IP adress shouldn't be 192.168.42.1 or 192.168.43.1
if ip link | grep $INTERFACE3 | grep "state UP" ; then
	STATICIP3=$(ip addr show $INTERFACE3 | grep -w inet)
	if [ -z "$STATICIP3" ] ; then
		sudo ifdown $INTERFACE3
		sudo ifup $INTERFACE3
	fi
	unset STATICIP3
	STATICIP3=$(ip addr show $INTERFACE3 | grep 192.168.42.1)
	if [ -n "$STATICIP3" ] ; then
		sudo ifdown $INTERFACE3
		sudo ifup $INTERFACE3 &>/dev/null &
	fi
else
		sudo ifdown $INTERFACE3
		# The next line should help TorBox to forget the old IP
		ip addr flush dev $INTERFACE3
		sudo ifup $INTERFACE3 &>/dev/null &
fi

# Is INTERFACE4 ready?
# Because it is a possible Internet source, the Interface should be up, but
# the IP adress shouldn't be 192.168.42.1 or 192.168.43.1
if ip link | grep $INTERFACE4 | grep "state UP" ; then
	STATICIP4=$(ip addr show $INTERFACE4 | grep -w inet)
	if [ -z "$STATICIP4" ] ; then
		sudo ifdown $INTERFACE4
		sudo ifup $INTERFACE4
#		sudo ifup $INTERFACE4 &>/dev/null &
	fi
	unset STATICIP4
	STATICIP4=$(ip addr show $INTERFACE4 | grep 192.168.43.1)
	if [ -n "$STATICIP4" ] ; then
		sudo ifdown $INTERFACE4
		sudo ifup $INTERFACE4 &>/dev/null &
	fi
else
		sudo ifdown $INTERFACE4
		# The next line should help TorBox to forget the old IP
		ip addr flush dev $INTERFACE4
		sudo ifup $INTERFACE4 &>/dev/null &
fi

# This last part resets the dhcp server and opens the iptables to access TorBox
# This function has to be used after an ifup command
# Important: the right iptables rules to use Tor have to configured afterward
sudo systemctl restart isc-dhcp-server
